similix -h 4000000
Welcome to Scheme 48 0.44 (Similix 5.1/post).
Copyright (c) 1993, 1994 by Richard Kelsey and Jonathan Rees.
Copyright (c) 1996 by NEC Research Institute, Inc.
Please report bugs to scheme-48-bugs@martigny.ai.mit.edu.
Type ,? (comma question-mark) for help.
> > > > > > > Similix (app) :> 
> > !!!preprocessing> 
> front-end _simtmp0.scm 
flow bt sp eod oc rl 
'done
> front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
Run time: 8.34 seconds; Elapsed time: 8.38 seconds
'done
> (^^^preprocessing time * 100)> 
> !!!generating compiler> 
> generating compiler (timing)
_simtmp0.scm 
'()
> generating compiler (timing)
Run time: 17.76 seconds; Elapsed time: 17.81 seconds
'()
> (^^^generation time * 100)> 
> !!!compiling> 
> generating compiler (timing)
> loading current compiler
_simtmp0.scm _simtmp1.scm 

specializing
'((define (app-0 y_1) (cons 'a (cons 'b (cons 'c y_1)))))
> specializing (timing)
Run time: 0.67 seconds; Elapsed time: 0.66 seconds
#t
> (^^^compilation time * 100)> 
> !!!specializing> 
> specializing (timing)
Run time: 1.33 seconds; Elapsed time: 1.33 seconds
#f
> (^^^specialization time * 100)> 
> > > ----------------------------------------------------------------------> 
> Similix (ctors) :> 
> > !!!preprocessing> 
> front-end _simtmp0.scm 
flow bt sp eod oc rl 
'done
> front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
Run time: 14.31 seconds; Elapsed time: 14.38 seconds
'done
> (^^^preprocessing time * 100)> 
> > !!!generating compiler> 
> generating compiler (timing)
'()
> generating compiler (timing)
Run time: 36.86 seconds; Elapsed time: 37.14 seconds
'()
> (^^^generation time * 100)> 
> > !!!compiling> 
> generating compiler (timing)
> loading current compiler
_simtmp0.scm _simtmp1.scm 
_simtmp1.scm 

specializing
'((loadt "examples/ctors.adt") (define (main-0 dd_1) (let* ((dd_2 dd_1) (g_3 (car dd_2)) (dd_4 (cdr dd_2)) (g_5 (car dd_4)) (dd_6 (cdr dd_4)) (g_7 (car dd_6)) (dd_8 (cdr dd_6))) 3)))
> specializing (timing)
Run time: 1.23 seconds; Elapsed time: 1.24 seconds
#t
> (^^^compilation time * 100)> 
> > !!!specializing> 
> specializing (timing)
Run time: 2.74 seconds; Elapsed time: 2.74 seconds
#f
> (^^^specialization time * 100)> 
> > > ----------------------------------------------------------------------> 
> Similix (lambda) :> 
> > !!!preprocessing> 
> front-end flow bt sp eod oc rl 
'done
> front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
Run time: 14.93 seconds; Elapsed time: 15.01 seconds
'done
> (^^^preprocessing time * 100)> 
> > !!!generating compiler> 
> generating compiler (timing)
'()
> generating compiler (timing)
Run time: 47.65 seconds; Elapsed time: 47.79 seconds
'()
> (^^^generation time * 100)> 
> > !!!generating compiler> 
> !!!compiling> 
> generating compiler (timing)
> loading current compiler
_simtmp0.scm _simtmp1.scm 

specializing
'((define (main-0 d_1) (define (mymap-0-2 f_10 l_9) (let ((l_11 l_9)) (if (null? l_11) '() (cons (- (car l_11) f_10) (mymap-0-2 f_10 (cdr l_11)))))) (define (mymap-0-1 f_5 l_4) (let ((l_6 l_4)) (if (null? l_6) '() (cons (+ (car l_6) f_5) (mymap-0-1 f_5 (cdr l_6)))))) (let* ((y_2 42) (d_3 d_1)) (cons (mymap-0-1 y_2 d_3) (mymap-0-2 y_2 d_3)))))
> specializing (timing)
Run time: 2.04 seconds; Elapsed time: 2.03 seconds
#t
> (^^^compilation time * 100)> 
> > !!!specializing> 
> specializing (timing)
Run time: 3.22 seconds; Elapsed time: 3.22 seconds
#f
> (^^^specialization time * 100)> 
> > > > > ----------------------------------------------------------------------> 
> Similix (direct-lr) :> 
> ../lr-essence/examples/grammars.scm 
> > !!!preprocessing> 
> front-end _simtmp1.scm 
_simtmp1.scm 
_simtmp1.scm 
_simtmp1.scm 
flow bt sp eod oc rl 
'done
> Before: 982432 words free in semispace
After:  1141626 words free in semispace
> front-end _simtmp2.scm 
flow bt sp eod oc rl 
Run time: 2.54 seconds; Elapsed time: 2.99 seconds
'done
> (^^^preprocessing time * 1)> 
> > !!!generating compiler> 
> generating compiler (timing)
'()
> Before: 867083 words free in semispace
After:  991099 words free in semispace
> generating compiler (timing)
Run time: 6.69 seconds; Elapsed time: 6.70 seconds
'()
> (^^^generation time * 1)> 
> > !!!compiling> 
> generating compiler (timing)
> loading current compiler
_simtmp3.scm 
_simtmp3.scm _simtmp4.scm 
_simtmp4.scm 
_simtmp4.scm 
_simtmp4.scm 
_simtmp4.scm 

specializing
'((defprim (parse-result the-lhs the-dot the-attr the-inp) (vector the-lhs the-dot the-inp)) (defprim (result-lhs result) (vector-ref result 0)) (defprim (result-dot result) (vector-ref result 1)) (defprim (result-att result) (vector-ref result 2)) (defprim (result-inp result) (vector-ref result 3)) (defprim-dynamic (prim-eval expr) (eval expr (interaction-environment))) (defprim-dynamic (prim-apply f args) (apply f args)) (defprim (input-char ch) (car ch)) (defprim (input-attr ch) (cdr ch)) (loadt "../lr-essence/common/util.adt") (loadt "../lr-essence/common/grammar.adt") (loadt "../lr-essence/common/stream.adt") (define (direct-parse-main-0 input_1) (define (loop-0-1 ch_10 p_9 attribute-stack_8 input_7) (let* ((ch_11 ch_10) (p_12 p_9) (attribute-stack_13 attribute-stack_8) (input_14 input_7)) (if (equal? 'n ch_11) (let* ((attribute-stack_15 attribute-stack_13) (input_16 (stream-cdr input_14)) (input_17 input_16) (ch_18 (stream-car input_17)) (input_19 input_17) (result_57 (inner-loop-0-2 ch_18 input_19 (cons (input-attr p_12) attribute-stack_15) input_16))) (parse-bar-0-8 (result-dot result_57) (result-lhs result_57) (result-att result_57) attribute-stack_15 (result-inp result_57))) (let* ((p_1921 p_12) (attribute-stack_1922 attribute-stack_13) (input_1923 input_14)) (loop-0-100 ch_11 p_1921 attribute-stack_1922 input_1923))))) (define (loop-0-100 ch_1927 p_1926 attribute-stack_1925 input_1924) (let* ((ch_1928 ch_1927) (p_1929 p_1926) (attribute-stack_1930 attribute-stack_1925) (input_1931 input_1924)) (if (equal? 'l ch_1928) (let* ((attribute-stack_1932 attribute-stack_1930) (input_1933 (stream-cdr input_1931)) (p_1934 (stream-car input_1933)) (p_1935 p_1934) (attribute-stack_1936 (cons (input-attr p_1929) attribute-stack_1932)) (input_1937 input_1933) (result_1942 (loop-0-37 (input-char p_1934) p_1935 attribute-stack_1936 input_1937))) (parse-bar-0-8 (result-dot result_1942) (result-lhs result_1942) (result-att result_1942) attribute-stack_1932 (result-inp result_1942))) (let* ((p_1948 p_1929) (attribute-stack_1949 attribute-stack_1930) (input_1950 input_1931)) (_sim-error 'direct-parse "can't shift on" ch_1928))))) (define (parse-bar-0-8 the-dot_62 the-lhs_61 the-att_60 attribute-stack_59 the-inp_58) (let* ((the-dot_63 the-dot_62) (the-lhs_64 the-lhs_61) (the-att_65 the-att_60) (attribute-stack_66 attribute-stack_59) (the-inp_67 the-inp_58)) (if (< 1 the-dot_63) (parse-result the-lhs_64 (- the-dot_63 1) the-att_65 the-inp_67) (let ((the-lhs_68 the-lhs_64)) (loop-0-9 the-lhs_68 the-att_65 attribute-stack_66 the-inp_67))))) (define (loop-0-9 the-lhs_72 the-att_71 attribute-stack_70 the-inp_69) (let* ((the-lhs_73 the-lhs_72) (the-att_74 the-att_71) (attribute-stack_75 attribute-stack_70) (the-inp_76 the-inp_69)) (if (equal? 1 the-lhs_73) (let* ((attribute-stack_77 attribute-stack_75) (input_78 the-inp_76) (result_83 (direct-parse-0-10 (cons the-att_74 attribute-stack_77) input_78))) result_83) (let ((the-lhs_84 the-lhs_73)) (loop-0-11 the-lhs_84 the-att_74 attribute-stack_75 the-inp_76))))) (define (loop-0-11 the-lhs_88 the-att_87 attribute-stack_86 the-inp_85) (let* ((the-lhs_89 the-lhs_88) (the-att_90 the-att_87) (attribute-stack_91 attribute-stack_86) (the-inp_92 the-inp_85)) (if (equal? 2 the-lhs_89) (let* ((attribute-stack_93 attribute-stack_91) (input_94 the-inp_92) (input_95 input_94) (ch_96 (stream-car input_95)) (input_97 input_95) (result_1899 (inner-loop-0-12 ch_96 input_97 (cons the-att_90 attribute-stack_93) input_94))) (parse-bar-0-8 (result-dot result_1899) (result-lhs result_1899) (result-att result_1899) attribute-stack_93 (result-inp result_1899))) (let* ((the-lhs_1905 the-lhs_89) (attribute-stack_1906 attribute-stack_91) (input_1907 the-inp_92) (input_1908 input_1907) (ch_1909 (stream-car input_1908)) (input_1910 input_1908) (result_1915 (inner-loop-0-20 ch_1909 input_1910 (cons the-att_90 attribute-stack_1906) input_1907))) (parse-bar-0-8 (result-dot result_1915) (result-lhs result_1915) (result-att result_1915) attribute-stack_1906 (result-inp result_1915)))))) (define (inner-loop-0-12 ch_101 input_100 attribute-stack_99 input_98) (let* ((ch_102 ch_101) (input_103 input_100) (attribute-stack_104 attribute-stack_99) (input_105 input_98)) (if (loop-0-13 ch_102) (let* ((input_109 '()) (attribute-stack_110 attribute-stack_104) (input_111 input_105) (stack_112 attribute-stack_110) (g_113 (car stack_112))) (parse-result 1 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_113 '())) input_111)) (let* ((ch_115 ch_102) (input_116 input_103) (attribute-stack_117 attribute-stack_104) (input_118 input_105) (p_119 (stream-car input_118)) (p_120 p_119) (attribute-stack_121 attribute-stack_117) (input_122 input_118)) (loop-0-14 (input-char p_119) p_120 attribute-stack_121 input_122))))) (define (loop-0-14 ch_126 p_125 attribute-stack_124 input_123) (let* ((ch_127 ch_126) (p_128 p_125) (attribute-stack_129 attribute-stack_124) (input_130 input_123)) (if (equal? '- ch_127) (let* ((attribute-stack_131 attribute-stack_129) (input_132 (stream-cdr input_130)) (p_133 (stream-car input_132)) (p_134 p_133) (attribute-stack_135 (cons (input-attr p_128) attribute-stack_131)) (input_136 input_132) (result_1730 (loop-0-15 (input-char p_133) p_134 attribute-stack_135 input_136))) (parse-result (result-lhs result_1730) (- (result-dot result_1730) 1) (result-att result_1730) (result-inp result_1730))) (let* ((p_1731 p_128) (attribute-stack_1732 attribute-stack_129) (input_1733 input_130)) (loop-0-93 ch_127 p_1731 attribute-stack_1732 input_1733))))) (define (loop-0-93 ch_1737 p_1736 attribute-stack_1735 input_1734) (let* ((ch_1738 ch_1737) (p_1739 p_1736) (attribute-stack_1740 attribute-stack_1735) (input_1741 input_1734)) (if (equal? '+ ch_1738) (let* ((attribute-stack_1742 attribute-stack_1740) (input_1743 (stream-cdr input_1741)) (p_1744 (stream-car input_1743)) (p_1745 p_1744) (attribute-stack_1746 (cons (input-attr p_1739) attribute-stack_1742)) (input_1747 input_1743) (result_1895 (loop-0-94 (input-char p_1744) p_1745 attribute-stack_1746 input_1747))) (parse-result (result-lhs result_1895) (- (result-dot result_1895) 1) (result-att result_1895) (result-inp result_1895))) (let* ((p_1896 p_1739) (attribute-stack_1897 attribute-stack_1740) (input_1898 input_1741)) (_sim-error 'direct-parse "can't shift on" ch_1738))))) (define (loop-0-94 ch_1751 p_1750 attribute-stack_1749 input_1748) (let* ((ch_1752 ch_1751) (p_1753 p_1750) (attribute-stack_1754 attribute-stack_1749) (input_1755 input_1748)) (if (equal? 'n ch_1752) (let* ((attribute-stack_1756 attribute-stack_1754) (input_1757 (stream-cdr input_1755)) (input_1758 input_1757) (ch_1759 (stream-car input_1758)) (input_1760 input_1758) (result_1765 (inner-loop-0-2 ch_1759 input_1760 (cons (input-attr p_1753) attribute-stack_1756) input_1757))) (parse-bar-0-95 (result-dot result_1765) (result-lhs result_1765) (result-att result_1765) attribute-stack_1756 (result-inp result_1765))) (let* ((p_1865 p_1753) (attribute-stack_1866 attribute-stack_1754) (input_1867 input_1755)) (loop-0-99 ch_1752 p_1865 attribute-stack_1866 input_1867))))) (define (loop-0-99 ch_1871 p_1870 attribute-stack_1869 input_1868) (let* ((ch_1872 ch_1871) (p_1873 p_1870) (attribute-stack_1874 attribute-stack_1869) (input_1875 input_1868)) (if (equal? 'l ch_1872) (let* ((attribute-stack_1876 attribute-stack_1874) (input_1877 (stream-cdr input_1875)) (p_1878 (stream-car input_1877)) (p_1879 p_1878) (attribute-stack_1880 (cons (input-attr p_1873) attribute-stack_1876)) (input_1881 input_1877) (result_1886 (loop-0-37 (input-char p_1878) p_1879 attribute-stack_1880 input_1881))) (parse-bar-0-95 (result-dot result_1886) (result-lhs result_1886) (result-att result_1886) attribute-stack_1876 (result-inp result_1886))) (let* ((p_1892 p_1873) (attribute-stack_1893 attribute-stack_1874) (input_1894 input_1875)) (_sim-error 'direct-parse "can't shift on" ch_1872))))) (define (parse-bar-0-95 the-dot_1770 the-lhs_1769 the-att_1768 attribute-stack_1767 the-inp_1766) (let* ((the-dot_1771 the-dot_1770) (the-lhs_1772 the-lhs_1769) (the-att_1773 the-att_1768) (attribute-stack_1774 attribute-stack_1767) (the-inp_1775 the-inp_1766)) (if (< 1 the-dot_1771) (parse-result the-lhs_1772 (- the-dot_1771 1) the-att_1773 the-inp_1775) (let ((the-lhs_1776 the-lhs_1772)) (loop-0-96 the-lhs_1776 the-att_1773 attribute-stack_1774 the-inp_1775))))) (define (loop-0-96 the-lhs_1780 the-att_1779 attribute-stack_1778 the-inp_1777) (let* ((the-lhs_1781 the-lhs_1780) (the-att_1782 the-att_1779) (attribute-stack_1783 attribute-stack_1778) (the-inp_1784 the-inp_1777)) (if (equal? 1 the-lhs_1781) (let* ((attribute-stack_1785 attribute-stack_1783) (input_1786 the-inp_1784) (input_1787 input_1786) (ch_1788 (stream-car input_1787)) (input_1789 input_1787) (result_1819 (inner-loop-0-97 ch_1788 input_1789 (cons the-att_1782 attribute-stack_1785) input_1786))) (parse-bar-0-95 (result-dot result_1819) (result-lhs result_1819) (result-att result_1819) attribute-stack_1785 (result-inp result_1819))) (let ((the-lhs_1825 the-lhs_1781)) (loop-0-98 the-lhs_1825 the-att_1782 attribute-stack_1783 the-inp_1784))))) (define (loop-0-98 the-lhs_1829 the-att_1828 attribute-stack_1827 the-inp_1826) (let* ((the-lhs_1830 the-lhs_1829) (the-att_1831 the-att_1828) (attribute-stack_1832 attribute-stack_1827) (the-inp_1833 the-inp_1826)) (if (equal? 2 the-lhs_1830) (let* ((attribute-stack_1834 attribute-stack_1832) (input_1835 the-inp_1833) (input_1836 input_1835) (ch_1837 (stream-car input_1836)) (input_1838 input_1836) (result_1843 (inner-loop-0-12 ch_1837 input_1838 (cons the-att_1831 attribute-stack_1834) input_1835))) (parse-bar-0-95 (result-dot result_1843) (result-lhs result_1843) (result-att result_1843) attribute-stack_1834 (result-inp result_1843))) (let* ((the-lhs_1849 the-lhs_1830) (attribute-stack_1850 attribute-stack_1832) (input_1851 the-inp_1833) (input_1852 input_1851) (ch_1853 (stream-car input_1852)) (input_1854 input_1852) (result_1859 (inner-loop-0-20 ch_1853 input_1854 (cons the-att_1831 attribute-stack_1850) input_1851))) (parse-bar-0-95 (result-dot result_1859) (result-lhs result_1859) (result-att result_1859) attribute-stack_1850 (result-inp result_1859)))))) (define (inner-loop-0-97 ch_1793 input_1792 attribute-stack_1791 input_1790) (let* ((ch_1794 ch_1793) (input_1795 input_1792) (attribute-stack_1796 attribute-stack_1791) (input_1797 input_1790)) (if (loop-0-13 ch_1794) (let* ((input_1799 '()) (attribute-stack_1800 attribute-stack_1796) (input_1801 input_1797) (stack_1802 attribute-stack_1800) (g_1803 (car stack_1802)) (stack_1804 (cdr stack_1802)) (g_1805 (car stack_1804)) (stack_1806 (cdr stack_1804)) (g_1807 (car stack_1806))) (parse-result 1 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (+ $1 $3))) (cons g_1807 (cons g_1805 (cons g_1803 '())))) input_1801)) (let* ((ch_1811 ch_1794) (input_1812 input_1795) (attribute-stack_1813 attribute-stack_1796) (input_1814 input_1797) (p_1815 (stream-car input_1814)) (p_1816 p_1815) (attribute-stack_1817 attribute-stack_1813) (input_1818 input_1814)) (_sim-error 'direct-parse "can't shift on" (input-char p_1815)))))) (define (loop-0-15 ch_140 p_139 attribute-stack_138 input_137) (let* ((ch_141 ch_140) (p_142 p_139) (attribute-stack_143 attribute-stack_138) (input_144 input_137)) (if (equal? 'n ch_141) (let* ((attribute-stack_145 attribute-stack_143) (input_146 (stream-cdr input_144)) (input_147 input_146) (ch_148 (stream-car input_147)) (input_149 input_147) (result_154 (inner-loop-0-2 ch_148 input_149 (cons (input-attr p_142) attribute-stack_145) input_146))) (parse-bar-0-16 (result-dot result_154) (result-lhs result_154) (result-att result_154) attribute-stack_145 (result-inp result_154))) (let* ((p_1700 p_142) (attribute-stack_1701 attribute-stack_143) (input_1702 input_144)) (loop-0-92 ch_141 p_1700 attribute-stack_1701 input_1702))))) (define (loop-0-92 ch_1706 p_1705 attribute-stack_1704 input_1703) (let* ((ch_1707 ch_1706) (p_1708 p_1705) (attribute-stack_1709 attribute-stack_1704) (input_1710 input_1703)) (if (equal? 'l ch_1707) (let* ((attribute-stack_1711 attribute-stack_1709) (input_1712 (stream-cdr input_1710)) (p_1713 (stream-car input_1712)) (p_1714 p_1713) (attribute-stack_1715 (cons (input-attr p_1708) attribute-stack_1711)) (input_1716 input_1712) (result_1721 (loop-0-37 (input-char p_1713) p_1714 attribute-stack_1715 input_1716))) (parse-bar-0-16 (result-dot result_1721) (result-lhs result_1721) (result-att result_1721) attribute-stack_1711 (result-inp result_1721))) (let* ((p_1727 p_1708) (attribute-stack_1728 attribute-stack_1709) (input_1729 input_1710)) (_sim-error 'direct-parse "can't shift on" ch_1707))))) (define (parse-bar-0-16 the-dot_159 the-lhs_158 the-att_157 attribute-stack_156 the-inp_155) (let* ((the-dot_160 the-dot_159) (the-lhs_161 the-lhs_158) (the-att_162 the-att_157) (attribute-stack_163 attribute-stack_156) (the-inp_164 the-inp_155)) (if (< 1 the-dot_160) (parse-result the-lhs_161 (- the-dot_160 1) the-att_162 the-inp_164) (let ((the-lhs_165 the-lhs_161)) (loop-0-17 the-lhs_165 the-att_162 attribute-stack_163 the-inp_164))))) (define (loop-0-17 the-lhs_169 the-att_168 attribute-stack_167 the-inp_166) (let* ((the-lhs_170 the-lhs_169) (the-att_171 the-att_168) (attribute-stack_172 attribute-stack_167) (the-inp_173 the-inp_166)) (if (equal? 1 the-lhs_170) (let* ((attribute-stack_174 attribute-stack_172) (input_175 the-inp_173) (input_176 input_175) (ch_177 (stream-car input_176)) (input_178 input_176) (result_208 (inner-loop-0-18 ch_177 input_178 (cons the-att_171 attribute-stack_174) input_175))) (parse-bar-0-16 (result-dot result_208) (result-lhs result_208) (result-att result_208) attribute-stack_174 (result-inp result_208))) (let ((the-lhs_214 the-lhs_170)) (loop-0-19 the-lhs_214 the-att_171 attribute-stack_172 the-inp_173))))) (define (loop-0-19 the-lhs_218 the-att_217 attribute-stack_216 the-inp_215) (let* ((the-lhs_219 the-lhs_218) (the-att_220 the-att_217) (attribute-stack_221 attribute-stack_216) (the-inp_222 the-inp_215)) (if (equal? 2 the-lhs_219) (let* ((attribute-stack_223 attribute-stack_221) (input_224 the-inp_222) (input_225 input_224) (ch_226 (stream-car input_225)) (input_227 input_225) (result_232 (inner-loop-0-12 ch_226 input_227 (cons the-att_220 attribute-stack_223) input_224))) (parse-bar-0-16 (result-dot result_232) (result-lhs result_232) (result-att result_232) attribute-stack_223 (result-inp result_232))) (let* ((the-lhs_238 the-lhs_219) (attribute-stack_239 attribute-stack_221) (input_240 the-inp_222) (input_241 input_240) (ch_242 (stream-car input_241)) (input_243 input_241) (result_1694 (inner-loop-0-20 ch_242 input_243 (cons the-att_220 attribute-stack_239) input_240))) (parse-bar-0-16 (result-dot result_1694) (result-lhs result_1694) (result-att result_1694) attribute-stack_239 (result-inp result_1694)))))) (define (inner-loop-0-20 ch_247 input_246 attribute-stack_245 input_244) (let* ((ch_248 ch_247) (input_249 input_246) (attribute-stack_250 attribute-stack_245) (input_251 input_244)) (if (loop-0-21 ch_248) (let* ((input_261 '()) (attribute-stack_262 attribute-stack_250) (input_263 input_251) (stack_264 attribute-stack_262) (g_265 (car stack_264))) (parse-result 2 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_265 '())) input_263)) (let* ((ch_267 ch_248) (input_268 input_249) (attribute-stack_269 attribute-stack_250) (input_270 input_251) (p_271 (stream-car input_270)) (p_272 p_271) (attribute-stack_273 attribute-stack_269) (input_274 input_270)) (loop-0-24 (input-char p_271) p_272 attribute-stack_273 input_274))))) (define (loop-0-24 ch_278 p_277 attribute-stack_276 input_275) (let* ((ch_279 ch_278) (p_280 p_277) (attribute-stack_281 attribute-stack_276) (input_282 input_275)) (if (equal? '/ ch_279) (let* ((attribute-stack_283 attribute-stack_281) (input_284 (stream-cdr input_282)) (p_285 (stream-car input_284)) (p_286 p_285) (attribute-stack_287 (cons (input-attr p_280) attribute-stack_283)) (input_288 input_284) (result_1668 (loop-0-25 (input-char p_285) p_286 attribute-stack_287 input_288))) (parse-result (result-lhs result_1668) (- (result-dot result_1668) 1) (result-att result_1668) (result-inp result_1668))) (let* ((p_1669 p_280) (attribute-stack_1670 attribute-stack_281) (input_1671 input_282)) (loop-0-91 ch_279 p_1669 attribute-stack_1670 input_1671))))) (define (loop-0-91 ch_1675 p_1674 attribute-stack_1673 input_1672) (let* ((ch_1676 ch_1675) (p_1677 p_1674) (attribute-stack_1678 attribute-stack_1673) (input_1679 input_1672)) (if (equal? '* ch_1676) (let* ((attribute-stack_1680 attribute-stack_1678) (input_1681 (stream-cdr input_1679)) (p_1682 (stream-car input_1681)) (p_1683 p_1682) (attribute-stack_1684 (cons (input-attr p_1677) attribute-stack_1680)) (input_1685 input_1681) (result_1690 (loop-0-32 (input-char p_1682) p_1683 attribute-stack_1684 input_1685))) (parse-result (result-lhs result_1690) (- (result-dot result_1690) 1) (result-att result_1690) (result-inp result_1690))) (let* ((p_1691 p_1677) (attribute-stack_1692 attribute-stack_1678) (input_1693 input_1679)) (_sim-error 'direct-parse "can't shift on" ch_1676))))) (define (loop-0-25 ch_292 p_291 attribute-stack_290 input_289) (let* ((ch_293 ch_292) (p_294 p_291) (attribute-stack_295 attribute-stack_290) (input_296 input_289)) (if (equal? 'n ch_293) (let* ((attribute-stack_297 attribute-stack_295) (input_298 (stream-cdr input_296)) (input_299 input_298) (ch_300 (stream-car input_299)) (input_301 input_299) (result_306 (inner-loop-0-2 ch_300 input_301 (cons (input-attr p_294) attribute-stack_297) input_298))) (parse-bar-0-26 (result-dot result_306) (result-lhs result_306) (result-att result_306) attribute-stack_297 (result-inp result_306))) (let* ((p_1638 p_294) (attribute-stack_1639 attribute-stack_295) (input_1640 input_296)) (loop-0-90 ch_293 p_1638 attribute-stack_1639 input_1640))))) (define (loop-0-90 ch_1644 p_1643 attribute-stack_1642 input_1641) (let* ((ch_1645 ch_1644) (p_1646 p_1643) (attribute-stack_1647 attribute-stack_1642) (input_1648 input_1641)) (if (equal? 'l ch_1645) (let* ((attribute-stack_1649 attribute-stack_1647) (input_1650 (stream-cdr input_1648)) (p_1651 (stream-car input_1650)) (p_1652 p_1651) (attribute-stack_1653 (cons (input-attr p_1646) attribute-stack_1649)) (input_1654 input_1650) (result_1659 (loop-0-37 (input-char p_1651) p_1652 attribute-stack_1653 input_1654))) (parse-bar-0-26 (result-dot result_1659) (result-lhs result_1659) (result-att result_1659) attribute-stack_1649 (result-inp result_1659))) (let* ((p_1665 p_1646) (attribute-stack_1666 attribute-stack_1647) (input_1667 input_1648)) (_sim-error 'direct-parse "can't shift on" ch_1645))))) (define (parse-bar-0-26 the-dot_311 the-lhs_310 the-att_309 attribute-stack_308 the-inp_307) (let* ((the-dot_312 the-dot_311) (the-lhs_313 the-lhs_310) (the-att_314 the-att_309) (attribute-stack_315 attribute-stack_308) (the-inp_316 the-inp_307)) (if (< 1 the-dot_312) (parse-result the-lhs_313 (- the-dot_312 1) the-att_314 the-inp_316) (let ((the-lhs_317 the-lhs_313)) (loop-0-27 the-lhs_317 the-att_314 attribute-stack_315 the-inp_316))))) (define (loop-0-27 the-lhs_321 the-att_320 attribute-stack_319 the-inp_318) (let* ((the-lhs_322 the-lhs_321) (the-att_323 the-att_320) (attribute-stack_324 attribute-stack_319) (the-inp_325 the-inp_318)) (if (equal? 2 the-lhs_322) (let* ((attribute-stack_326 attribute-stack_324) (input_327 the-inp_325) (input_328 input_327) (ch_329 (stream-car input_328)) (input_330 input_328) (result_360 (inner-loop-0-28 ch_329 input_330 (cons the-att_323 attribute-stack_326) input_327))) (parse-bar-0-26 (result-dot result_360) (result-lhs result_360) (result-att result_360) attribute-stack_326 (result-inp result_360))) (let* ((the-lhs_366 the-lhs_322) (attribute-stack_367 attribute-stack_324) (input_368 the-inp_325) (input_369 input_368) (ch_370 (stream-car input_369)) (input_371 input_369) (result_1632 (inner-loop-0-29 ch_370 input_371 (cons the-att_323 attribute-stack_367) input_368))) (parse-bar-0-26 (result-dot result_1632) (result-lhs result_1632) (result-att result_1632) attribute-stack_367 (result-inp result_1632)))))) (define (inner-loop-0-29 ch_375 input_374 attribute-stack_373 input_372) (let* ((ch_376 ch_375) (input_377 input_374) (attribute-stack_378 attribute-stack_373) (input_379 input_372)) (if (loop-0-21 ch_376) (let* ((input_381 '()) (attribute-stack_382 attribute-stack_378) (input_383 input_379) (stack_384 attribute-stack_382) (g_385 (car stack_384))) (parse-result 2 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_385 '())) input_383)) (let* ((ch_387 ch_376) (input_388 input_377) (attribute-stack_389 attribute-stack_378) (input_390 input_379) (p_391 (stream-car input_390)) (p_392 p_391) (attribute-stack_393 attribute-stack_389) (input_394 input_390)) (loop-0-30 (input-char p_391) p_392 attribute-stack_393 input_394))))) (define (loop-0-30 ch_398 p_397 attribute-stack_396 input_395) (let* ((ch_399 ch_398) (p_400 p_397) (attribute-stack_401 attribute-stack_396) (input_402 input_395)) (if (equal? '/ ch_399) (let* ((attribute-stack_403 attribute-stack_401) (input_404 (stream-cdr input_402)) (p_405 (stream-car input_404)) (p_406 p_405) (attribute-stack_407 (cons (input-attr p_400) attribute-stack_403)) (input_408 input_404) (result_413 (loop-0-25 (input-char p_405) p_406 attribute-stack_407 input_408))) (parse-result (result-lhs result_413) (- (result-dot result_413) 1) (result-att result_413) (result-inp result_413))) (let* ((p_414 p_400) (attribute-stack_415 attribute-stack_401) (input_416 input_402)) (loop-0-31 ch_399 p_414 attribute-stack_415 input_416))))) (define (loop-0-31 ch_420 p_419 attribute-stack_418 input_417) (let* ((ch_421 ch_420) (p_422 p_419) (attribute-stack_423 attribute-stack_418) (input_424 input_417)) (if (equal? '* ch_421) (let* ((attribute-stack_425 attribute-stack_423) (input_426 (stream-cdr input_424)) (p_427 (stream-car input_426)) (p_428 p_427) (attribute-stack_429 (cons (input-attr p_422) attribute-stack_425)) (input_430 input_426) (result_1628 (loop-0-32 (input-char p_427) p_428 attribute-stack_429 input_430))) (parse-result (result-lhs result_1628) (- (result-dot result_1628) 1) (result-att result_1628) (result-inp result_1628))) (let* ((p_1629 p_422) (attribute-stack_1630 attribute-stack_423) (input_1631 input_424)) (_sim-error 'direct-parse "can't shift on" ch_421))))) (define (loop-0-32 ch_434 p_433 attribute-stack_432 input_431) (let* ((ch_435 ch_434) (p_436 p_433) (attribute-stack_437 attribute-stack_432) (input_438 input_431)) (if (equal? 'n ch_435) (let* ((attribute-stack_439 attribute-stack_437) (input_440 (stream-cdr input_438)) (input_441 input_440) (ch_442 (stream-car input_441)) (input_443 input_441) (result_448 (inner-loop-0-2 ch_442 input_443 (cons (input-attr p_436) attribute-stack_439) input_440))) (parse-bar-0-33 (result-dot result_448) (result-lhs result_448) (result-att result_448) attribute-stack_439 (result-inp result_448))) (let* ((p_524 p_436) (attribute-stack_525 attribute-stack_437) (input_526 input_438)) (loop-0-36 ch_435 p_524 attribute-stack_525 input_526))))) (define (loop-0-36 ch_530 p_529 attribute-stack_528 input_527) (let* ((ch_531 ch_530) (p_532 p_529) (attribute-stack_533 attribute-stack_528) (input_534 input_527)) (if (equal? 'l ch_531) (let* ((attribute-stack_535 attribute-stack_533) (input_536 (stream-cdr input_534)) (p_537 (stream-car input_536)) (p_538 p_537) (attribute-stack_539 (cons (input-attr p_532) attribute-stack_535)) (input_540 input_536) (result_1619 (loop-0-37 (input-char p_537) p_538 attribute-stack_539 input_540))) (parse-bar-0-33 (result-dot result_1619) (result-lhs result_1619) (result-att result_1619) attribute-stack_535 (result-inp result_1619))) (let* ((p_1625 p_532) (attribute-stack_1626 attribute-stack_533) (input_1627 input_534)) (_sim-error 'direct-parse "can't shift on" ch_531))))) (define (loop-0-37 ch_544 p_543 attribute-stack_542 input_541) (let* ((ch_545 ch_544) (p_546 p_543) (attribute-stack_547 attribute-stack_542) (input_548 input_541)) (if (equal? 'n ch_545) (let* ((attribute-stack_549 attribute-stack_547) (input_550 (stream-cdr input_548)) (input_551 input_550) (ch_552 (stream-car input_551)) (input_553 input_551) (result_591 (inner-loop-0-38 ch_552 input_553 (cons (input-attr p_546) attribute-stack_549) input_550))) (parse-bar-0-44 (result-dot result_591) (result-lhs result_591) (result-att result_591) attribute-stack_549 (result-inp result_591))) (let* ((p_1589 p_546) (attribute-stack_1590 attribute-stack_547) (input_1591 input_548)) (loop-0-89 ch_545 p_1589 attribute-stack_1590 input_1591))))) (define (loop-0-89 ch_1595 p_1594 attribute-stack_1593 input_1592) (let* ((ch_1596 ch_1595) (p_1597 p_1594) (attribute-stack_1598 attribute-stack_1593) (input_1599 input_1592)) (if (equal? 'l ch_1596) (let* ((attribute-stack_1600 attribute-stack_1598) (input_1601 (stream-cdr input_1599)) (p_1602 (stream-car input_1601)) (p_1603 p_1602) (attribute-stack_1604 (cons (input-attr p_1597) attribute-stack_1600)) (input_1605 input_1601) (result_1610 (loop-0-72 (input-char p_1602) p_1603 attribute-stack_1604 input_1605))) (parse-bar-0-44 (result-dot result_1610) (result-lhs result_1610) (result-att result_1610) attribute-stack_1600 (result-inp result_1610))) (let* ((p_1616 p_1597) (attribute-stack_1617 attribute-stack_1598) (input_1618 input_1599)) (_sim-error 'direct-parse "can't shift on" ch_1596))))) (define (parse-bar-0-44 the-dot_596 the-lhs_595 the-att_594 attribute-stack_593 the-inp_592) (let* ((the-dot_597 the-dot_596) (the-lhs_598 the-lhs_595) (the-att_599 the-att_594) (attribute-stack_600 attribute-stack_593) (the-inp_601 the-inp_592)) (if (< 1 the-dot_597) (parse-result the-lhs_598 (- the-dot_597 1) the-att_599 the-inp_601) (let ((the-lhs_602 the-lhs_598)) (loop-0-45 the-lhs_602 the-att_599 attribute-stack_600 the-inp_601))))) (define (loop-0-45 the-lhs_606 the-att_605 attribute-stack_604 the-inp_603) (let* ((the-lhs_607 the-lhs_606) (the-att_608 the-att_605) (attribute-stack_609 attribute-stack_604) (the-inp_610 the-inp_603)) (if (equal? 1 the-lhs_607) (let* ((attribute-stack_611 attribute-stack_609) (input_612 the-inp_610) (p_613 (stream-car input_612)) (p_614 p_613) (attribute-stack_615 (cons the-att_608 attribute-stack_611)) (input_616 input_612) (result_663 (loop-0-46 (input-char p_613) p_614 attribute-stack_615 input_616))) (parse-bar-0-44 (result-dot result_663) (result-lhs result_663) (result-att result_663) attribute-stack_611 (result-inp result_663))) (let ((the-lhs_669 the-lhs_607)) (loop-0-48 the-lhs_669 the-att_608 attribute-stack_609 the-inp_610))))) (define (loop-0-48 the-lhs_673 the-att_672 attribute-stack_671 the-inp_670) (let* ((the-lhs_674 the-lhs_673) (the-att_675 the-att_672) (attribute-stack_676 attribute-stack_671) (the-inp_677 the-inp_670)) (if (equal? 2 the-lhs_674) (let* ((attribute-stack_678 attribute-stack_676) (input_679 the-inp_677) (input_680 input_679) (ch_681 (stream-car input_680)) (input_682 input_680) (result_1567 (inner-loop-0-49 ch_681 input_682 (cons the-att_675 attribute-stack_678) input_679))) (parse-bar-0-44 (result-dot result_1567) (result-lhs result_1567) (result-att result_1567) attribute-stack_678 (result-inp result_1567))) (let* ((the-lhs_1573 the-lhs_674) (attribute-stack_1574 attribute-stack_676) (input_1575 the-inp_677) (input_1576 input_1575) (ch_1577 (stream-car input_1576)) (input_1578 input_1576) (result_1583 (inner-loop-0-56 ch_1577 input_1578 (cons the-att_675 attribute-stack_1574) input_1575))) (parse-bar-0-44 (result-dot result_1583) (result-lhs result_1583) (result-att result_1583) attribute-stack_1574 (result-inp result_1583)))))) (define (inner-loop-0-49 ch_686 input_685 attribute-stack_684 input_683) (let* ((ch_687 ch_686) (input_688 input_685) (attribute-stack_689 attribute-stack_684) (input_690 input_683)) (if (loop-0-43 ch_687) (let* ((input_692 '()) (attribute-stack_693 attribute-stack_689) (input_694 input_690) (stack_695 attribute-stack_693) (g_696 (car stack_695))) (parse-result 1 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_696 '())) input_694)) (let* ((ch_698 ch_687) (input_699 input_688) (attribute-stack_700 attribute-stack_689) (input_701 input_690) (p_702 (stream-car input_701)) (p_703 p_702) (attribute-stack_704 attribute-stack_700) (input_705 input_701)) (loop-0-50 (input-char p_702) p_703 attribute-stack_704 input_705))))) (define (loop-0-50 ch_709 p_708 attribute-stack_707 input_706) (let* ((ch_710 ch_709) (p_711 p_708) (attribute-stack_712 attribute-stack_707) (input_713 input_706)) (if (equal? '- ch_710) (let* ((attribute-stack_714 attribute-stack_712) (input_715 (stream-cdr input_713)) (p_716 (stream-car input_715)) (p_717 p_716) (attribute-stack_718 (cons (input-attr p_711) attribute-stack_714)) (input_719 input_715) (result_1398 (loop-0-51 (input-char p_716) p_717 attribute-stack_718 input_719))) (parse-result (result-lhs result_1398) (- (result-dot result_1398) 1) (result-att result_1398) (result-inp result_1398))) (let* ((p_1399 p_711) (attribute-stack_1400 attribute-stack_712) (input_1401 input_713)) (loop-0-82 ch_710 p_1399 attribute-stack_1400 input_1401))))) (define (loop-0-82 ch_1405 p_1404 attribute-stack_1403 input_1402) (let* ((ch_1406 ch_1405) (p_1407 p_1404) (attribute-stack_1408 attribute-stack_1403) (input_1409 input_1402)) (if (equal? '+ ch_1406) (let* ((attribute-stack_1410 attribute-stack_1408) (input_1411 (stream-cdr input_1409)) (p_1412 (stream-car input_1411)) (p_1413 p_1412) (attribute-stack_1414 (cons (input-attr p_1407) attribute-stack_1410)) (input_1415 input_1411) (result_1563 (loop-0-83 (input-char p_1412) p_1413 attribute-stack_1414 input_1415))) (parse-result (result-lhs result_1563) (- (result-dot result_1563) 1) (result-att result_1563) (result-inp result_1563))) (let* ((p_1564 p_1407) (attribute-stack_1565 attribute-stack_1408) (input_1566 input_1409)) (_sim-error 'direct-parse "can't shift on" ch_1406))))) (define (loop-0-83 ch_1419 p_1418 attribute-stack_1417 input_1416) (let* ((ch_1420 ch_1419) (p_1421 p_1418) (attribute-stack_1422 attribute-stack_1417) (input_1423 input_1416)) (if (equal? 'n ch_1420) (let* ((attribute-stack_1424 attribute-stack_1422) (input_1425 (stream-cdr input_1423)) (input_1426 input_1425) (ch_1427 (stream-car input_1426)) (input_1428 input_1426) (result_1433 (inner-loop-0-38 ch_1427 input_1428 (cons (input-attr p_1421) attribute-stack_1424) input_1425))) (parse-bar-0-84 (result-dot result_1433) (result-lhs result_1433) (result-att result_1433) attribute-stack_1424 (result-inp result_1433))) (let* ((p_1533 p_1421) (attribute-stack_1534 attribute-stack_1422) (input_1535 input_1423)) (loop-0-88 ch_1420 p_1533 attribute-stack_1534 input_1535))))) (define (loop-0-88 ch_1539 p_1538 attribute-stack_1537 input_1536) (let* ((ch_1540 ch_1539) (p_1541 p_1538) (attribute-stack_1542 attribute-stack_1537) (input_1543 input_1536)) (if (equal? 'l ch_1540) (let* ((attribute-stack_1544 attribute-stack_1542) (input_1545 (stream-cdr input_1543)) (p_1546 (stream-car input_1545)) (p_1547 p_1546) (attribute-stack_1548 (cons (input-attr p_1541) attribute-stack_1544)) (input_1549 input_1545) (result_1554 (loop-0-72 (input-char p_1546) p_1547 attribute-stack_1548 input_1549))) (parse-bar-0-84 (result-dot result_1554) (result-lhs result_1554) (result-att result_1554) attribute-stack_1544 (result-inp result_1554))) (let* ((p_1560 p_1541) (attribute-stack_1561 attribute-stack_1542) (input_1562 input_1543)) (_sim-error 'direct-parse "can't shift on" ch_1540))))) (define (parse-bar-0-84 the-dot_1438 the-lhs_1437 the-att_1436 attribute-stack_1435 the-inp_1434) (let* ((the-dot_1439 the-dot_1438) (the-lhs_1440 the-lhs_1437) (the-att_1441 the-att_1436) (attribute-stack_1442 attribute-stack_1435) (the-inp_1443 the-inp_1434)) (if (< 1 the-dot_1439) (parse-result the-lhs_1440 (- the-dot_1439 1) the-att_1441 the-inp_1443) (let ((the-lhs_1444 the-lhs_1440)) (loop-0-85 the-lhs_1444 the-att_1441 attribute-stack_1442 the-inp_1443))))) (define (loop-0-85 the-lhs_1448 the-att_1447 attribute-stack_1446 the-inp_1445) (let* ((the-lhs_1449 the-lhs_1448) (the-att_1450 the-att_1447) (attribute-stack_1451 attribute-stack_1446) (the-inp_1452 the-inp_1445)) (if (equal? 1 the-lhs_1449) (let* ((attribute-stack_1453 attribute-stack_1451) (input_1454 the-inp_1452) (input_1455 input_1454) (ch_1456 (stream-car input_1455)) (input_1457 input_1455) (result_1487 (inner-loop-0-86 ch_1456 input_1457 (cons the-att_1450 attribute-stack_1453) input_1454))) (parse-bar-0-84 (result-dot result_1487) (result-lhs result_1487) (result-att result_1487) attribute-stack_1453 (result-inp result_1487))) (let ((the-lhs_1493 the-lhs_1449)) (loop-0-87 the-lhs_1493 the-att_1450 attribute-stack_1451 the-inp_1452))))) (define (loop-0-87 the-lhs_1497 the-att_1496 attribute-stack_1495 the-inp_1494) (let* ((the-lhs_1498 the-lhs_1497) (the-att_1499 the-att_1496) (attribute-stack_1500 attribute-stack_1495) (the-inp_1501 the-inp_1494)) (if (equal? 2 the-lhs_1498) (let* ((attribute-stack_1502 attribute-stack_1500) (input_1503 the-inp_1501) (input_1504 input_1503) (ch_1505 (stream-car input_1504)) (input_1506 input_1504) (result_1511 (inner-loop-0-49 ch_1505 input_1506 (cons the-att_1499 attribute-stack_1502) input_1503))) (parse-bar-0-84 (result-dot result_1511) (result-lhs result_1511) (result-att result_1511) attribute-stack_1502 (result-inp result_1511))) (let* ((the-lhs_1517 the-lhs_1498) (attribute-stack_1518 attribute-stack_1500) (input_1519 the-inp_1501) (input_1520 input_1519) (ch_1521 (stream-car input_1520)) (input_1522 input_1520) (result_1527 (inner-loop-0-56 ch_1521 input_1522 (cons the-att_1499 attribute-stack_1518) input_1519))) (parse-bar-0-84 (result-dot result_1527) (result-lhs result_1527) (result-att result_1527) attribute-stack_1518 (result-inp result_1527)))))) (define (inner-loop-0-86 ch_1461 input_1460 attribute-stack_1459 input_1458) (let* ((ch_1462 ch_1461) (input_1463 input_1460) (attribute-stack_1464 attribute-stack_1459) (input_1465 input_1458)) (if (loop-0-43 ch_1462) (let* ((input_1467 '()) (attribute-stack_1468 attribute-stack_1464) (input_1469 input_1465) (stack_1470 attribute-stack_1468) (g_1471 (car stack_1470)) (stack_1472 (cdr stack_1470)) (g_1473 (car stack_1472)) (stack_1474 (cdr stack_1472)) (g_1475 (car stack_1474))) (parse-result 1 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (+ $1 $3))) (cons g_1475 (cons g_1473 (cons g_1471 '())))) input_1469)) (let* ((ch_1479 ch_1462) (input_1480 input_1463) (attribute-stack_1481 attribute-stack_1464) (input_1482 input_1465) (p_1483 (stream-car input_1482)) (p_1484 p_1483) (attribute-stack_1485 attribute-stack_1481) (input_1486 input_1482)) (_sim-error 'direct-parse "can't shift on" (input-char p_1483)))))) (define (loop-0-51 ch_723 p_722 attribute-stack_721 input_720) (let* ((ch_724 ch_723) (p_725 p_722) (attribute-stack_726 attribute-stack_721) (input_727 input_720)) (if (equal? 'n ch_724) (let* ((attribute-stack_728 attribute-stack_726) (input_729 (stream-cdr input_727)) (input_730 input_729) (ch_731 (stream-car input_730)) (input_732 input_730) (result_737 (inner-loop-0-38 ch_731 input_732 (cons (input-attr p_725) attribute-stack_728) input_729))) (parse-bar-0-52 (result-dot result_737) (result-lhs result_737) (result-att result_737) attribute-stack_728 (result-inp result_737))) (let* ((p_1368 p_725) (attribute-stack_1369 attribute-stack_726) (input_1370 input_727)) (loop-0-81 ch_724 p_1368 attribute-stack_1369 input_1370))))) (define (loop-0-81 ch_1374 p_1373 attribute-stack_1372 input_1371) (let* ((ch_1375 ch_1374) (p_1376 p_1373) (attribute-stack_1377 attribute-stack_1372) (input_1378 input_1371)) (if (equal? 'l ch_1375) (let* ((attribute-stack_1379 attribute-stack_1377) (input_1380 (stream-cdr input_1378)) (p_1381 (stream-car input_1380)) (p_1382 p_1381) (attribute-stack_1383 (cons (input-attr p_1376) attribute-stack_1379)) (input_1384 input_1380) (result_1389 (loop-0-72 (input-char p_1381) p_1382 attribute-stack_1383 input_1384))) (parse-bar-0-52 (result-dot result_1389) (result-lhs result_1389) (result-att result_1389) attribute-stack_1379 (result-inp result_1389))) (let* ((p_1395 p_1376) (attribute-stack_1396 attribute-stack_1377) (input_1397 input_1378)) (_sim-error 'direct-parse "can't shift on" ch_1375))))) (define (parse-bar-0-52 the-dot_742 the-lhs_741 the-att_740 attribute-stack_739 the-inp_738) (let* ((the-dot_743 the-dot_742) (the-lhs_744 the-lhs_741) (the-att_745 the-att_740) (attribute-stack_746 attribute-stack_739) (the-inp_747 the-inp_738)) (if (< 1 the-dot_743) (parse-result the-lhs_744 (- the-dot_743 1) the-att_745 the-inp_747) (let ((the-lhs_748 the-lhs_744)) (loop-0-53 the-lhs_748 the-att_745 attribute-stack_746 the-inp_747))))) (define (loop-0-53 the-lhs_752 the-att_751 attribute-stack_750 the-inp_749) (let* ((the-lhs_753 the-lhs_752) (the-att_754 the-att_751) (attribute-stack_755 attribute-stack_750) (the-inp_756 the-inp_749)) (if (equal? 1 the-lhs_753) (let* ((attribute-stack_757 attribute-stack_755) (input_758 the-inp_756) (input_759 input_758) (ch_760 (stream-car input_759)) (input_761 input_759) (result_791 (inner-loop-0-54 ch_760 input_761 (cons the-att_754 attribute-stack_757) input_758))) (parse-bar-0-52 (result-dot result_791) (result-lhs result_791) (result-att result_791) attribute-stack_757 (result-inp result_791))) (let ((the-lhs_797 the-lhs_753)) (loop-0-55 the-lhs_797 the-att_754 attribute-stack_755 the-inp_756))))) (define (loop-0-55 the-lhs_801 the-att_800 attribute-stack_799 the-inp_798) (let* ((the-lhs_802 the-lhs_801) (the-att_803 the-att_800) (attribute-stack_804 attribute-stack_799) (the-inp_805 the-inp_798)) (if (equal? 2 the-lhs_802) (let* ((attribute-stack_806 attribute-stack_804) (input_807 the-inp_805) (input_808 input_807) (ch_809 (stream-car input_808)) (input_810 input_808) (result_815 (inner-loop-0-49 ch_809 input_810 (cons the-att_803 attribute-stack_806) input_807))) (parse-bar-0-52 (result-dot result_815) (result-lhs result_815) (result-att result_815) attribute-stack_806 (result-inp result_815))) (let* ((the-lhs_821 the-lhs_802) (attribute-stack_822 attribute-stack_804) (input_823 the-inp_805) (input_824 input_823) (ch_825 (stream-car input_824)) (input_826 input_824) (result_1362 (inner-loop-0-56 ch_825 input_826 (cons the-att_803 attribute-stack_822) input_823))) (parse-bar-0-52 (result-dot result_1362) (result-lhs result_1362) (result-att result_1362) attribute-stack_822 (result-inp result_1362)))))) (define (inner-loop-0-56 ch_830 input_829 attribute-stack_828 input_827) (let* ((ch_831 ch_830) (input_832 input_829) (attribute-stack_833 attribute-stack_828) (input_834 input_827)) (if (loop-0-57 ch_831) (let* ((input_842 '()) (attribute-stack_843 attribute-stack_833) (input_844 input_834) (stack_845 attribute-stack_843) (g_846 (car stack_845))) (parse-result 2 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_846 '())) input_844)) (let* ((ch_848 ch_831) (input_849 input_832) (attribute-stack_850 attribute-stack_833) (input_851 input_834) (p_852 (stream-car input_851)) (p_853 p_852) (attribute-stack_854 attribute-stack_850) (input_855 input_851)) (loop-0-59 (input-char p_852) p_853 attribute-stack_854 input_855))))) (define (loop-0-59 ch_859 p_858 attribute-stack_857 input_856) (let* ((ch_860 ch_859) (p_861 p_858) (attribute-stack_862 attribute-stack_857) (input_863 input_856)) (if (equal? '/ ch_860) (let* ((attribute-stack_864 attribute-stack_862) (input_865 (stream-cdr input_863)) (p_866 (stream-car input_865)) (p_867 p_866) (attribute-stack_868 (cons (input-attr p_861) attribute-stack_864)) (input_869 input_865) (result_1336 (loop-0-60 (input-char p_866) p_867 attribute-stack_868 input_869))) (parse-result (result-lhs result_1336) (- (result-dot result_1336) 1) (result-att result_1336) (result-inp result_1336))) (let* ((p_1337 p_861) (attribute-stack_1338 attribute-stack_862) (input_1339 input_863)) (loop-0-80 ch_860 p_1337 attribute-stack_1338 input_1339))))) (define (loop-0-80 ch_1343 p_1342 attribute-stack_1341 input_1340) (let* ((ch_1344 ch_1343) (p_1345 p_1342) (attribute-stack_1346 attribute-stack_1341) (input_1347 input_1340)) (if (equal? '* ch_1344) (let* ((attribute-stack_1348 attribute-stack_1346) (input_1349 (stream-cdr input_1347)) (p_1350 (stream-car input_1349)) (p_1351 p_1350) (attribute-stack_1352 (cons (input-attr p_1345) attribute-stack_1348)) (input_1353 input_1349) (result_1358 (loop-0-67 (input-char p_1350) p_1351 attribute-stack_1352 input_1353))) (parse-result (result-lhs result_1358) (- (result-dot result_1358) 1) (result-att result_1358) (result-inp result_1358))) (let* ((p_1359 p_1345) (attribute-stack_1360 attribute-stack_1346) (input_1361 input_1347)) (_sim-error 'direct-parse "can't shift on" ch_1344))))) (define (loop-0-60 ch_873 p_872 attribute-stack_871 input_870) (let* ((ch_874 ch_873) (p_875 p_872) (attribute-stack_876 attribute-stack_871) (input_877 input_870)) (if (equal? 'n ch_874) (let* ((attribute-stack_878 attribute-stack_876) (input_879 (stream-cdr input_877)) (input_880 input_879) (ch_881 (stream-car input_880)) (input_882 input_880) (result_887 (inner-loop-0-38 ch_881 input_882 (cons (input-attr p_875) attribute-stack_878) input_879))) (parse-bar-0-61 (result-dot result_887) (result-lhs result_887) (result-att result_887) attribute-stack_878 (result-inp result_887))) (let* ((p_1306 p_875) (attribute-stack_1307 attribute-stack_876) (input_1308 input_877)) (loop-0-79 ch_874 p_1306 attribute-stack_1307 input_1308))))) (define (loop-0-79 ch_1312 p_1311 attribute-stack_1310 input_1309) (let* ((ch_1313 ch_1312) (p_1314 p_1311) (attribute-stack_1315 attribute-stack_1310) (input_1316 input_1309)) (if (equal? 'l ch_1313) (let* ((attribute-stack_1317 attribute-stack_1315) (input_1318 (stream-cdr input_1316)) (p_1319 (stream-car input_1318)) (p_1320 p_1319) (attribute-stack_1321 (cons (input-attr p_1314) attribute-stack_1317)) (input_1322 input_1318) (result_1327 (loop-0-72 (input-char p_1319) p_1320 attribute-stack_1321 input_1322))) (parse-bar-0-61 (result-dot result_1327) (result-lhs result_1327) (result-att result_1327) attribute-stack_1317 (result-inp result_1327))) (let* ((p_1333 p_1314) (attribute-stack_1334 attribute-stack_1315) (input_1335 input_1316)) (_sim-error 'direct-parse "can't shift on" ch_1313))))) (define (parse-bar-0-61 the-dot_892 the-lhs_891 the-att_890 attribute-stack_889 the-inp_888) (let* ((the-dot_893 the-dot_892) (the-lhs_894 the-lhs_891) (the-att_895 the-att_890) (attribute-stack_896 attribute-stack_889) (the-inp_897 the-inp_888)) (if (< 1 the-dot_893) (parse-result the-lhs_894 (- the-dot_893 1) the-att_895 the-inp_897) (let ((the-lhs_898 the-lhs_894)) (loop-0-62 the-lhs_898 the-att_895 attribute-stack_896 the-inp_897))))) (define (loop-0-62 the-lhs_902 the-att_901 attribute-stack_900 the-inp_899) (let* ((the-lhs_903 the-lhs_902) (the-att_904 the-att_901) (attribute-stack_905 attribute-stack_900) (the-inp_906 the-inp_899)) (if (equal? 2 the-lhs_903) (let* ((attribute-stack_907 attribute-stack_905) (input_908 the-inp_906) (input_909 input_908) (ch_910 (stream-car input_909)) (input_911 input_909) (result_941 (inner-loop-0-63 ch_910 input_911 (cons the-att_904 attribute-stack_907) input_908))) (parse-bar-0-61 (result-dot result_941) (result-lhs result_941) (result-att result_941) attribute-stack_907 (result-inp result_941))) (let* ((the-lhs_947 the-lhs_903) (attribute-stack_948 attribute-stack_905) (input_949 the-inp_906) (input_950 input_949) (ch_951 (stream-car input_950)) (input_952 input_950) (result_1300 (inner-loop-0-64 ch_951 input_952 (cons the-att_904 attribute-stack_948) input_949))) (parse-bar-0-61 (result-dot result_1300) (result-lhs result_1300) (result-att result_1300) attribute-stack_948 (result-inp result_1300)))))) (define (inner-loop-0-64 ch_956 input_955 attribute-stack_954 input_953) (let* ((ch_957 ch_956) (input_958 input_955) (attribute-stack_959 attribute-stack_954) (input_960 input_953)) (if (loop-0-57 ch_957) (let* ((input_962 '()) (attribute-stack_963 attribute-stack_959) (input_964 input_960) (stack_965 attribute-stack_963) (g_966 (car stack_965))) (parse-result 2 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_966 '())) input_964)) (let* ((ch_968 ch_957) (input_969 input_958) (attribute-stack_970 attribute-stack_959) (input_971 input_960) (p_972 (stream-car input_971)) (p_973 p_972) (attribute-stack_974 attribute-stack_970) (input_975 input_971)) (loop-0-65 (input-char p_972) p_973 attribute-stack_974 input_975))))) (define (loop-0-65 ch_979 p_978 attribute-stack_977 input_976) (let* ((ch_980 ch_979) (p_981 p_978) (attribute-stack_982 attribute-stack_977) (input_983 input_976)) (if (equal? '/ ch_980) (let* ((attribute-stack_984 attribute-stack_982) (input_985 (stream-cdr input_983)) (p_986 (stream-car input_985)) (p_987 p_986) (attribute-stack_988 (cons (input-attr p_981) attribute-stack_984)) (input_989 input_985) (result_994 (loop-0-60 (input-char p_986) p_987 attribute-stack_988 input_989))) (parse-result (result-lhs result_994) (- (result-dot result_994) 1) (result-att result_994) (result-inp result_994))) (let* ((p_995 p_981) (attribute-stack_996 attribute-stack_982) (input_997 input_983)) (loop-0-66 ch_980 p_995 attribute-stack_996 input_997))))) (define (loop-0-66 ch_1001 p_1000 attribute-stack_999 input_998) (let* ((ch_1002 ch_1001) (p_1003 p_1000) (attribute-stack_1004 attribute-stack_999) (input_1005 input_998)) (if (equal? '* ch_1002) (let* ((attribute-stack_1006 attribute-stack_1004) (input_1007 (stream-cdr input_1005)) (p_1008 (stream-car input_1007)) (p_1009 p_1008) (attribute-stack_1010 (cons (input-attr p_1003) attribute-stack_1006)) (input_1011 input_1007) (result_1296 (loop-0-67 (input-char p_1008) p_1009 attribute-stack_1010 input_1011))) (parse-result (result-lhs result_1296) (- (result-dot result_1296) 1) (result-att result_1296) (result-inp result_1296))) (let* ((p_1297 p_1003) (attribute-stack_1298 attribute-stack_1004) (input_1299 input_1005)) (_sim-error 'direct-parse "can't shift on" ch_1002))))) (define (loop-0-67 ch_1015 p_1014 attribute-stack_1013 input_1012) (let* ((ch_1016 ch_1015) (p_1017 p_1014) (attribute-stack_1018 attribute-stack_1013) (input_1019 input_1012)) (if (equal? 'n ch_1016) (let* ((attribute-stack_1020 attribute-stack_1018) (input_1021 (stream-cdr input_1019)) (input_1022 input_1021) (ch_1023 (stream-car input_1022)) (input_1024 input_1022) (result_1029 (inner-loop-0-38 ch_1023 input_1024 (cons (input-attr p_1017) attribute-stack_1020) input_1021))) (parse-bar-0-68 (result-dot result_1029) (result-lhs result_1029) (result-att result_1029) attribute-stack_1020 (result-inp result_1029))) (let* ((p_1105 p_1017) (attribute-stack_1106 attribute-stack_1018) (input_1107 input_1019)) (loop-0-71 ch_1016 p_1105 attribute-stack_1106 input_1107))))) (define (loop-0-71 ch_1111 p_1110 attribute-stack_1109 input_1108) (let* ((ch_1112 ch_1111) (p_1113 p_1110) (attribute-stack_1114 attribute-stack_1109) (input_1115 input_1108)) (if (equal? 'l ch_1112) (let* ((attribute-stack_1116 attribute-stack_1114) (input_1117 (stream-cdr input_1115)) (p_1118 (stream-car input_1117)) (p_1119 p_1118) (attribute-stack_1120 (cons (input-attr p_1113) attribute-stack_1116)) (input_1121 input_1117) (result_1287 (loop-0-72 (input-char p_1118) p_1119 attribute-stack_1120 input_1121))) (parse-bar-0-68 (result-dot result_1287) (result-lhs result_1287) (result-att result_1287) attribute-stack_1116 (result-inp result_1287))) (let* ((p_1293 p_1113) (attribute-stack_1294 attribute-stack_1114) (input_1295 input_1115)) (_sim-error 'direct-parse "can't shift on" ch_1112))))) (define (loop-0-72 ch_1125 p_1124 attribute-stack_1123 input_1122) (let* ((ch_1126 ch_1125) (p_1127 p_1124) (attribute-stack_1128 attribute-stack_1123) (input_1129 input_1122)) (if (equal? 'n ch_1126) (let* ((attribute-stack_1130 attribute-stack_1128) (input_1131 (stream-cdr input_1129)) (input_1132 input_1131) (ch_1133 (stream-car input_1132)) (input_1134 input_1132) (result_1139 (inner-loop-0-38 ch_1133 input_1134 (cons (input-attr p_1127) attribute-stack_1130) input_1131))) (parse-bar-0-73 (result-dot result_1139) (result-lhs result_1139) (result-att result_1139) attribute-stack_1130 (result-inp result_1139))) (let* ((p_1257 p_1127) (attribute-stack_1258 attribute-stack_1128) (input_1259 input_1129)) (loop-0-78 ch_1126 p_1257 attribute-stack_1258 input_1259))))) (define (loop-0-78 ch_1263 p_1262 attribute-stack_1261 input_1260) (let* ((ch_1264 ch_1263) (p_1265 p_1262) (attribute-stack_1266 attribute-stack_1261) (input_1267 input_1260)) (if (equal? 'l ch_1264) (let* ((attribute-stack_1268 attribute-stack_1266) (input_1269 (stream-cdr input_1267)) (p_1270 (stream-car input_1269)) (p_1271 p_1270) (attribute-stack_1272 (cons (input-attr p_1265) attribute-stack_1268)) (input_1273 input_1269) (result_1278 (loop-0-72 (input-char p_1270) p_1271 attribute-stack_1272 input_1273))) (parse-bar-0-73 (result-dot result_1278) (result-lhs result_1278) (result-att result_1278) attribute-stack_1268 (result-inp result_1278))) (let* ((p_1284 p_1265) (attribute-stack_1285 attribute-stack_1266) (input_1286 input_1267)) (_sim-error 'direct-parse "can't shift on" ch_1264))))) (define (parse-bar-0-73 the-dot_1144 the-lhs_1143 the-att_1142 attribute-stack_1141 the-inp_1140) (let* ((the-dot_1145 the-dot_1144) (the-lhs_1146 the-lhs_1143) (the-att_1147 the-att_1142) (attribute-stack_1148 attribute-stack_1141) (the-inp_1149 the-inp_1140)) (if (< 1 the-dot_1145) (parse-result the-lhs_1146 (- the-dot_1145 1) the-att_1147 the-inp_1149) (let ((the-lhs_1150 the-lhs_1146)) (loop-0-74 the-lhs_1150 the-att_1147 attribute-stack_1148 the-inp_1149))))) (define (loop-0-74 the-lhs_1154 the-att_1153 attribute-stack_1152 the-inp_1151) (let* ((the-lhs_1155 the-lhs_1154) (the-att_1156 the-att_1153) (attribute-stack_1157 attribute-stack_1152) (the-inp_1158 the-inp_1151)) (if (equal? 1 the-lhs_1155) (let* ((attribute-stack_1159 attribute-stack_1157) (input_1160 the-inp_1158) (p_1161 (stream-car input_1160)) (p_1162 p_1161) (attribute-stack_1163 (cons the-att_1156 attribute-stack_1159)) (input_1164 input_1160) (result_1211 (loop-0-75 (input-char p_1161) p_1162 attribute-stack_1163 input_1164))) (parse-bar-0-73 (result-dot result_1211) (result-lhs result_1211) (result-att result_1211) attribute-stack_1159 (result-inp result_1211))) (let ((the-lhs_1217 the-lhs_1155)) (loop-0-77 the-lhs_1217 the-att_1156 attribute-stack_1157 the-inp_1158))))) (define (loop-0-77 the-lhs_1221 the-att_1220 attribute-stack_1219 the-inp_1218) (let* ((the-lhs_1222 the-lhs_1221) (the-att_1223 the-att_1220) (attribute-stack_1224 attribute-stack_1219) (the-inp_1225 the-inp_1218)) (if (equal? 2 the-lhs_1222) (let* ((attribute-stack_1226 attribute-stack_1224) (input_1227 the-inp_1225) (input_1228 input_1227) (ch_1229 (stream-car input_1228)) (input_1230 input_1228) (result_1235 (inner-loop-0-49 ch_1229 input_1230 (cons the-att_1223 attribute-stack_1226) input_1227))) (parse-bar-0-73 (result-dot result_1235) (result-lhs result_1235) (result-att result_1235) attribute-stack_1226 (result-inp result_1235))) (let* ((the-lhs_1241 the-lhs_1222) (attribute-stack_1242 attribute-stack_1224) (input_1243 the-inp_1225) (input_1244 input_1243) (ch_1245 (stream-car input_1244)) (input_1246 input_1244) (result_1251 (inner-loop-0-56 ch_1245 input_1246 (cons the-att_1223 attribute-stack_1242) input_1243))) (parse-bar-0-73 (result-dot result_1251) (result-lhs result_1251) (result-att result_1251) attribute-stack_1242 (result-inp result_1251)))))) (define (loop-0-75 ch_1168 p_1167 attribute-stack_1166 input_1165) (let* ((ch_1169 ch_1168) (p_1170 p_1167) (attribute-stack_1171 attribute-stack_1166) (input_1172 input_1165)) (if (equal? 'r ch_1169) (let* ((attribute-stack_1173 attribute-stack_1171) (input_1174 (stream-cdr input_1172)) (input_1175 input_1174) (ch_1176 (stream-car input_1175)) (input_1177 input_1175) (result_1207 (inner-loop-0-76 ch_1176 input_1177 (cons (input-attr p_1170) attribute-stack_1173) input_1174))) (parse-result (result-lhs result_1207) (- (result-dot result_1207) 1) (result-att result_1207) (result-inp result_1207))) (let* ((p_1208 p_1170) (attribute-stack_1209 attribute-stack_1171) (input_1210 input_1172)) (_sim-error 'direct-parse "can't shift on" ch_1169))))) (define (inner-loop-0-76 ch_1181 input_1180 attribute-stack_1179 input_1178) (let* ((ch_1182 ch_1181) (input_1183 input_1180) (attribute-stack_1184 attribute-stack_1179) (input_1185 input_1178)) (if (loop-0-39 ch_1182) (let* ((input_1187 '()) (attribute-stack_1188 attribute-stack_1184) (input_1189 input_1185) (stack_1190 attribute-stack_1188) (g_1191 (car stack_1190)) (stack_1192 (cdr stack_1190)) (g_1193 (car stack_1192)) (stack_1194 (cdr stack_1192)) (g_1195 (car stack_1194))) (parse-result 3 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) $2)) (cons g_1195 (cons g_1193 (cons g_1191 '())))) input_1189)) (let* ((ch_1199 ch_1182) (input_1200 input_1183) (attribute-stack_1201 attribute-stack_1184) (input_1202 input_1185) (p_1203 (stream-car input_1202)) (p_1204 p_1203) (attribute-stack_1205 attribute-stack_1201) (input_1206 input_1202)) (_sim-error 'direct-parse "can't shift on" (input-char p_1203)))))) (define (parse-bar-0-68 the-dot_1034 the-lhs_1033 the-att_1032 attribute-stack_1031 the-inp_1030) (let* ((the-dot_1035 the-dot_1034) (the-lhs_1036 the-lhs_1033) (the-att_1037 the-att_1032) (attribute-stack_1038 attribute-stack_1031) (the-inp_1039 the-inp_1030)) (if (< 1 the-dot_1035) (parse-result the-lhs_1036 (- the-dot_1035 1) the-att_1037 the-inp_1039) (let ((the-lhs_1040 the-lhs_1036)) (loop-0-69 the-lhs_1040 the-att_1037 attribute-stack_1038 the-inp_1039))))) (define (loop-0-69 the-lhs_1044 the-att_1043 attribute-stack_1042 the-inp_1041) (let* ((the-lhs_1045 the-lhs_1044) (the-att_1046 the-att_1043) (attribute-stack_1047 attribute-stack_1042) (the-inp_1048 the-inp_1041)) (if (equal? 2 the-lhs_1045) (let* ((attribute-stack_1049 attribute-stack_1047) (input_1050 the-inp_1048) (input_1051 input_1050) (ch_1052 (stream-car input_1051)) (input_1053 input_1051) (result_1083 (inner-loop-0-70 ch_1052 input_1053 (cons the-att_1046 attribute-stack_1049) input_1050))) (parse-bar-0-68 (result-dot result_1083) (result-lhs result_1083) (result-att result_1083) attribute-stack_1049 (result-inp result_1083))) (let* ((the-lhs_1089 the-lhs_1045) (attribute-stack_1090 attribute-stack_1047) (input_1091 the-inp_1048) (input_1092 input_1091) (ch_1093 (stream-car input_1092)) (input_1094 input_1092) (result_1099 (inner-loop-0-64 ch_1093 input_1094 (cons the-att_1046 attribute-stack_1090) input_1091))) (parse-bar-0-68 (result-dot result_1099) (result-lhs result_1099) (result-att result_1099) attribute-stack_1090 (result-inp result_1099)))))) (define (inner-loop-0-70 ch_1057 input_1056 attribute-stack_1055 input_1054) (let* ((ch_1058 ch_1057) (input_1059 input_1056) (attribute-stack_1060 attribute-stack_1055) (input_1061 input_1054)) (if (loop-0-57 ch_1058) (let* ((input_1063 '()) (attribute-stack_1064 attribute-stack_1060) (input_1065 input_1061) (stack_1066 attribute-stack_1064) (g_1067 (car stack_1066)) (stack_1068 (cdr stack_1066)) (g_1069 (car stack_1068)) (stack_1070 (cdr stack_1068)) (g_1071 (car stack_1070))) (parse-result 2 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (* $1 $3))) (cons g_1071 (cons g_1069 (cons g_1067 '())))) input_1065)) (let* ((ch_1075 ch_1058) (input_1076 input_1059) (attribute-stack_1077 attribute-stack_1060) (input_1078 input_1061) (p_1079 (stream-car input_1078)) (p_1080 p_1079) (attribute-stack_1081 attribute-stack_1077) (input_1082 input_1078)) (_sim-error 'direct-parse "can't shift on" (input-char p_1079)))))) (define (inner-loop-0-63 ch_915 input_914 attribute-stack_913 input_912) (let* ((ch_916 ch_915) (input_917 input_914) (attribute-stack_918 attribute-stack_913) (input_919 input_912)) (if (loop-0-57 ch_916) (let* ((input_921 '()) (attribute-stack_922 attribute-stack_918) (input_923 input_919) (stack_924 attribute-stack_922) (g_925 (car stack_924)) (stack_926 (cdr stack_924)) (g_927 (car stack_926)) (stack_928 (cdr stack_926)) (g_929 (car stack_928))) (parse-result 2 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (/ $1 $3))) (cons g_929 (cons g_927 (cons g_925 '())))) input_923)) (let* ((ch_933 ch_916) (input_934 input_917) (attribute-stack_935 attribute-stack_918) (input_936 input_919) (p_937 (stream-car input_936)) (p_938 p_937) (attribute-stack_939 attribute-stack_935) (input_940 input_936)) (_sim-error 'direct-parse "can't shift on" (input-char p_937)))))) (define (loop-0-57 ch_835) (let* ((ch_836 ch_835) (g-0_837 (equal? ch_836 '+))) (or g-0_837 (loop-0-58 ch_836)))) (define (loop-0-58 ch_838) (let* ((ch_839 ch_838) (g-0_840 (equal? ch_839 '-))) (or g-0_840 (loop-0-43 ch_839)))) (define (inner-loop-0-54 ch_765 input_764 attribute-stack_763 input_762) (let* ((ch_766 ch_765) (input_767 input_764) (attribute-stack_768 attribute-stack_763) (input_769 input_762)) (if (loop-0-43 ch_766) (let* ((input_771 '()) (attribute-stack_772 attribute-stack_768) (input_773 input_769) (stack_774 attribute-stack_772) (g_775 (car stack_774)) (stack_776 (cdr stack_774)) (g_777 (car stack_776)) (stack_778 (cdr stack_776)) (g_779 (car stack_778))) (parse-result 1 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (- $1 $3))) (cons g_779 (cons g_777 (cons g_775 '())))) input_773)) (let* ((ch_783 ch_766) (input_784 input_767) (attribute-stack_785 attribute-stack_768) (input_786 input_769) (p_787 (stream-car input_786)) (p_788 p_787) (attribute-stack_789 attribute-stack_785) (input_790 input_786)) (_sim-error 'direct-parse "can't shift on" (input-char p_787)))))) (define (loop-0-46 ch_620 p_619 attribute-stack_618 input_617) (let* ((ch_621 ch_620) (p_622 p_619) (attribute-stack_623 attribute-stack_618) (input_624 input_617)) (if (equal? 'r ch_621) (let* ((attribute-stack_625 attribute-stack_623) (input_626 (stream-cdr input_624)) (input_627 input_626) (ch_628 (stream-car input_627)) (input_629 input_627) (result_659 (inner-loop-0-47 ch_628 input_629 (cons (input-attr p_622) attribute-stack_625) input_626))) (parse-result (result-lhs result_659) (- (result-dot result_659) 1) (result-att result_659) (result-inp result_659))) (let* ((p_660 p_622) (attribute-stack_661 attribute-stack_623) (input_662 input_624)) (_sim-error 'direct-parse "can't shift on" ch_621))))) (define (inner-loop-0-47 ch_633 input_632 attribute-stack_631 input_630) (let* ((ch_634 ch_633) (input_635 input_632) (attribute-stack_636 attribute-stack_631) (input_637 input_630)) (if (loop-0-3 ch_634) (let* ((input_639 '()) (attribute-stack_640 attribute-stack_636) (input_641 input_637) (stack_642 attribute-stack_640) (g_643 (car stack_642)) (stack_644 (cdr stack_642)) (g_645 (car stack_644)) (stack_646 (cdr stack_644)) (g_647 (car stack_646))) (parse-result 3 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) $2)) (cons g_647 (cons g_645 (cons g_643 '())))) input_641)) (let* ((ch_651 ch_634) (input_652 input_635) (attribute-stack_653 attribute-stack_636) (input_654 input_637) (p_655 (stream-car input_654)) (p_656 p_655) (attribute-stack_657 attribute-stack_653) (input_658 input_654)) (_sim-error 'direct-parse "can't shift on" (input-char p_655)))))) (define (inner-loop-0-38 ch_557 input_556 attribute-stack_555 input_554) (let* ((ch_558 ch_557) (input_559 input_556) (attribute-stack_560 attribute-stack_555) (input_561 input_554)) (if (loop-0-39 ch_558) (let* ((input_577 '()) (attribute-stack_578 attribute-stack_560) (input_579 input_561) (stack_580 attribute-stack_578) (g_581 (car stack_580))) (parse-result 3 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_581 '())) input_579)) (let* ((ch_583 ch_558) (input_584 input_559) (attribute-stack_585 attribute-stack_560) (input_586 input_561) (p_587 (stream-car input_586)) (p_588 p_587) (attribute-stack_589 attribute-stack_585) (input_590 input_586)) (_sim-error 'direct-parse "can't shift on" (input-char p_587)))))) (define (loop-0-39 ch_562) (let* ((ch_563 ch_562) (g-0_564 (equal? ch_563 '*))) (or g-0_564 (loop-0-40 ch_563)))) (define (loop-0-40 ch_565) (let* ((ch_566 ch_565) (g-0_567 (equal? ch_566 '+))) (or g-0_567 (loop-0-41 ch_566)))) (define (loop-0-41 ch_568) (let* ((ch_569 ch_568) (g-0_570 (equal? ch_569 '-))) (or g-0_570 (loop-0-42 ch_569)))) (define (loop-0-42 ch_571) (let* ((ch_572 ch_571) (g-0_573 (equal? ch_572 '/))) (or g-0_573 (loop-0-43 ch_572)))) (define (loop-0-43 ch_574) (let* ((ch_575 ch_574) (g-0_576 (equal? ch_575 'r))) g-0_576)) (define (parse-bar-0-33 the-dot_453 the-lhs_452 the-att_451 attribute-stack_450 the-inp_449) (let* ((the-dot_454 the-dot_453) (the-lhs_455 the-lhs_452) (the-att_456 the-att_451) (attribute-stack_457 attribute-stack_450) (the-inp_458 the-inp_449)) (if (< 1 the-dot_454) (parse-result the-lhs_455 (- the-dot_454 1) the-att_456 the-inp_458) (let ((the-lhs_459 the-lhs_455)) (loop-0-34 the-lhs_459 the-att_456 attribute-stack_457 the-inp_458))))) (define (loop-0-34 the-lhs_463 the-att_462 attribute-stack_461 the-inp_460) (let* ((the-lhs_464 the-lhs_463) (the-att_465 the-att_462) (attribute-stack_466 attribute-stack_461) (the-inp_467 the-inp_460)) (if (equal? 2 the-lhs_464) (let* ((attribute-stack_468 attribute-stack_466) (input_469 the-inp_467) (input_470 input_469) (ch_471 (stream-car input_470)) (input_472 input_470) (result_502 (inner-loop-0-35 ch_471 input_472 (cons the-att_465 attribute-stack_468) input_469))) (parse-bar-0-33 (result-dot result_502) (result-lhs result_502) (result-att result_502) attribute-stack_468 (result-inp result_502))) (let* ((the-lhs_508 the-lhs_464) (attribute-stack_509 attribute-stack_466) (input_510 the-inp_467) (input_511 input_510) (ch_512 (stream-car input_511)) (input_513 input_511) (result_518 (inner-loop-0-29 ch_512 input_513 (cons the-att_465 attribute-stack_509) input_510))) (parse-bar-0-33 (result-dot result_518) (result-lhs result_518) (result-att result_518) attribute-stack_509 (result-inp result_518)))))) (define (inner-loop-0-35 ch_476 input_475 attribute-stack_474 input_473) (let* ((ch_477 ch_476) (input_478 input_475) (attribute-stack_479 attribute-stack_474) (input_480 input_473)) (if (loop-0-21 ch_477) (let* ((input_482 '()) (attribute-stack_483 attribute-stack_479) (input_484 input_480) (stack_485 attribute-stack_483) (g_486 (car stack_485)) (stack_487 (cdr stack_485)) (g_488 (car stack_487)) (stack_489 (cdr stack_487)) (g_490 (car stack_489))) (parse-result 2 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (* $1 $3))) (cons g_490 (cons g_488 (cons g_486 '())))) input_484)) (let* ((ch_494 ch_477) (input_495 input_478) (attribute-stack_496 attribute-stack_479) (input_497 input_480) (p_498 (stream-car input_497)) (p_499 p_498) (attribute-stack_500 attribute-stack_496) (input_501 input_497)) (_sim-error 'direct-parse "can't shift on" (input-char p_498)))))) (define (inner-loop-0-28 ch_334 input_333 attribute-stack_332 input_331) (let* ((ch_335 ch_334) (input_336 input_333) (attribute-stack_337 attribute-stack_332) (input_338 input_331)) (if (loop-0-21 ch_335) (let* ((input_340 '()) (attribute-stack_341 attribute-stack_337) (input_342 input_338) (stack_343 attribute-stack_341) (g_344 (car stack_343)) (stack_345 (cdr stack_343)) (g_346 (car stack_345)) (stack_347 (cdr stack_345)) (g_348 (car stack_347))) (parse-result 2 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (/ $1 $3))) (cons g_348 (cons g_346 (cons g_344 '())))) input_342)) (let* ((ch_352 ch_335) (input_353 input_336) (attribute-stack_354 attribute-stack_337) (input_355 input_338) (p_356 (stream-car input_355)) (p_357 p_356) (attribute-stack_358 attribute-stack_354) (input_359 input_355)) (_sim-error 'direct-parse "can't shift on" (input-char p_356)))))) (define (loop-0-21 ch_252) (let* ((ch_253 ch_252) (g-0_254 (equal? ch_253 '$))) (or g-0_254 (loop-0-22 ch_253)))) (define (loop-0-22 ch_255) (let* ((ch_256 ch_255) (g-0_257 (equal? ch_256 '+))) (or g-0_257 (loop-0-23 ch_256)))) (define (loop-0-23 ch_258) (let* ((ch_259 ch_258) (g-0_260 (equal? ch_259 '-))) g-0_260)) (define (inner-loop-0-18 ch_182 input_181 attribute-stack_180 input_179) (let* ((ch_183 ch_182) (input_184 input_181) (attribute-stack_185 attribute-stack_180) (input_186 input_179)) (if (loop-0-13 ch_183) (let* ((input_188 '()) (attribute-stack_189 attribute-stack_185) (input_190 input_186) (stack_191 attribute-stack_189) (g_192 (car stack_191)) (stack_193 (cdr stack_191)) (g_194 (car stack_193)) (stack_195 (cdr stack_193)) (g_196 (car stack_195))) (parse-result 1 3 (prim-apply (prim-eval '(lambda ($1 $2 $3) (- $1 $3))) (cons g_196 (cons g_194 (cons g_192 '())))) input_190)) (let* ((ch_200 ch_183) (input_201 input_184) (attribute-stack_202 attribute-stack_185) (input_203 input_186) (p_204 (stream-car input_203)) (p_205 p_204) (attribute-stack_206 attribute-stack_202) (input_207 input_203)) (_sim-error 'direct-parse "can't shift on" (input-char p_204)))))) (define (loop-0-13 ch_106) (let* ((ch_107 ch_106) (g-0_108 (equal? ch_107 '$))) g-0_108)) (define (direct-parse-0-10 attribute-stack_80 input_79) (let* ((attribute-stack_81 attribute-stack_80) (input_82 input_79)) (if (equal? '$ (input-char (stream-car input_82))) (car attribute-stack_81) (_sim-error 'direct-parse "expecting eof" (input-char (stream-car input_82)))))) (define (inner-loop-0-2 ch_23 input_22 attribute-stack_21 input_20) (let* ((ch_24 ch_23) (input_25 input_22) (attribute-stack_26 attribute-stack_21) (input_27 input_20)) (if (loop-0-3 ch_24) (let* ((input_43 '()) (attribute-stack_44 attribute-stack_26) (input_45 input_27) (stack_46 attribute-stack_44) (g_47 (car stack_46))) (parse-result 3 1 (prim-apply (prim-eval '(lambda ($1) $1)) (cons g_47 '())) input_45)) (let* ((ch_49 ch_24) (input_50 input_25) (attribute-stack_51 attribute-stack_26) (input_52 input_27) (p_53 (stream-car input_52)) (p_54 p_53) (attribute-stack_55 attribute-stack_51) (input_56 input_52)) (_sim-error 'direct-parse "can't shift on" (input-char p_53)))))) (define (loop-0-3 ch_28) (let* ((ch_29 ch_28) (g-0_30 (equal? ch_29 '$))) (or g-0_30 (loop-0-4 ch_29)))) (define (loop-0-4 ch_31) (let* ((ch_32 ch_31) (g-0_33 (equal? ch_32 '*))) (or g-0_33 (loop-0-5 ch_32)))) (define (loop-0-5 ch_34) (let* ((ch_35 ch_34) (g-0_36 (equal? ch_35 '+))) (or g-0_36 (loop-0-6 ch_35)))) (define (loop-0-6 ch_37) (let* ((ch_38 ch_37) (g-0_39 (equal? ch_38 '-))) (or g-0_39 (loop-0-7 ch_38)))) (define (loop-0-7 ch_40) (let* ((ch_41 ch_40) (g-0_42 (equal? ch_41 '/))) g-0_42)) (let* ((input_2 input_1) (p_3 (stream-car input_2)) (p_4 p_3) (attribute-stack_5 '()) (input_6 input_2)) (loop-0-1 (input-char p_3) p_4 attribute-stack_5 input_6))))
> Before: 307229 words free in semispace
After:  987073 words free in semispace
> specializing (timing)
Run time: 13.09 seconds; Elapsed time: 13.09 seconds
#t
> (^^^compilation time * 1)> 
> > !!!specializing> 
> Before: 428629 words free in semispace
After:  987073 words free in semispace
> specializing (timing)
Run time: 10.84 seconds; Elapsed time: 10.87 seconds
#f
> (^^^specialization time * 1)> 
> > > ----------------------------------------------------------------------> 
> Similix (cps-lr) :> 
> ../lr-essence/examples/grammars.scm 
> > !!!preprocessing> 
> front-end flow bt sp eod oc rl 
'done
> Before: 626575 words free in semispace
After:  991981 words free in semispace
> front-end flow bt sp eod oc rl 
Run time: 1.07 seconds; Elapsed time: 1.07 seconds
'done
> (^^^preprocessing time * 1)> 
> > !!!generating compiler> 
> generating compiler (timing)
'()
> Before: 611755 words free in semispace
After:  950641 words free in semispace
> generating compiler (timing)
Run time: 3.77 seconds; Elapsed time: 3.77 seconds
'()
> (^^^generation time * 1)> 
> !!!compiling> 
> generating compiler (timing)
> loading current compiler
_simtmp3.scm _simtmp4.scm 
_simtmp4.scm 

specializing
'((loadt "../lr-essence/common/grammar.adt") (define (do-parse-0 input_1) (define (parse-1-1 continuations_3 input_2) (let* ((continuations_4 continuations_3) (input_5 input_2)) (if #f 'accept (let* ((continuations_6 continuations_4) (input_7 (cdr input_5)) (element_8 (car input_5))) (loop-0-2 input_5 continuations_4 element_8 input_7 continuations_6))))) (define (loop-0-2 fail_13 fail_12 element_11 cont_10 cont_9) (let ((element_14 element_11)) (if (equal? element_14 'n) (shift-terminal-0-3 cont_9 cont_10) (let ((element_2191 element_14)) (loop-0-266 fail_13 fail_12 element_2191 cont_10 cont_9))))) (define (loop-0-266 fail_2196 fail_2195 element_2194 cont_2193 cont_2192) (let ((element_2197 element_2194)) (if (equal? element_2197 'l) (shift-terminal-0-267 cont_2192 cont_2193) (let* ((element_2212 element_2197) (l_2213 fail_2196) (l_2214 (cdr l_2213)) (input-front_2215 (cons (car l_2213) '()))) 'error)))) (define (shift-terminal-0-267 continuations_2199 input_2198) (let* ((continuations_2200 continuations_2199) (l_2209 continuations_2200)) (parse-1-78 (cons (lambda (g-3_2201 g-2_2202) (let* ((continuations_2203 continuations_2200) (input_2204 g-2_2202) (element_2205 g-3_2201)) (loop-0-4 element_2205 input_2204 continuations_2203))) '()) input_2198))) (define (shift-terminal-0-3 continuations_16 input_15) (let* ((continuations_17 continuations_16) (l_2188 continuations_17)) (parse-1-65 (cons (lambda (g-3_18 g-2_19) (let* ((continuations_20 continuations_17) (input_21 g-2_19) (element_22 g-3_18)) (loop-0-4 element_22 input_21 continuations_20))) '()) input_15))) (define (loop-0-4 element_25 cont_24 cont_23) (let ((element_26 element_25)) (if (equal? element_26 1) (shift-nonterminal-0-5 cont_23 cont_24) (let ((element_89 element_26)) (loop-0-12 element_89 cont_24 cont_23))))) (define (loop-0-12 element_92 cont_91 cont_90) (let ((element_93 element_92)) (if (equal? element_93 2) (shift-nonterminal-0-13 cont_90 cont_91) (let ((element_2168 element_93)) (loop-0-264 element_2168 cont_91 cont_90))))) (define (loop-0-264 element_2171 cont_2170 cont_2169) (let ((element_2172 element_2171)) (if (equal? element_2172 3) (shift-nonterminal-0-265 cont_2169 cont_2170) (let ((element_2187 element_2172)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-265 continuations_2174 input_2173) (let* ((continuations_2175 continuations_2174) (l_2184 continuations_2175)) (parse-1-29 (cons (lambda (g-1_2176 g-0_2177) (let* ((continuations_2178 continuations_2175) (input_2179 g-0_2177) (element_2180 g-1_2176)) (loop-0-4 element_2180 input_2179 continuations_2178))) '()) input_2173))) (define (shift-nonterminal-0-13 continuations_95 input_94) (let* ((continuations_96 continuations_95) (l_105 continuations_96)) (parse-1-14 (cons (lambda (g-1_97 g-0_98) (let* ((continuations_99 continuations_96) (input_100 g-0_98) (element_101 g-1_97)) (loop-0-4 element_101 input_100 continuations_99))) '()) input_94))) (define (parse-1-14 continuations_107 input_106) (let* ((continuations_108 continuations_107) (input_109 input_106)) (if #f 'accept (let* ((continuations_110 continuations_108) (input_111 (cdr input_109)) (element_112 (car input_109))) (loop-0-15 input_109 continuations_108 element_112 input_111 continuations_110))))) (define (loop-0-15 fail_117 fail_116 element_115 cont_114 cont_113) (let ((element_118 element_115)) (if (equal? element_118 '-) (shift-terminal-0-16 cont_113 cont_114) (let ((element_2005 element_118)) (loop-0-246 fail_117 fail_116 element_2005 cont_114 cont_113))))) (define (loop-0-246 fail_2010 fail_2009 element_2008 cont_2007 cont_2006) (let ((element_2011 element_2008)) (if (equal? element_2011 '+) (shift-terminal-0-247 cont_2006 cont_2007) (let* ((element_2151 element_2011) (l_2152 fail_2010) (l_2153 (cdr l_2152)) (input-front_2154 (cons (car l_2152) '()))) (loop-0-262 input-front_2154 fail_2010 fail_2009))))) (define (loop-0-262 input-front_2157 cont_2156 cont_2155) (let ((input-front_2158 input-front_2157)) (if (equal? input-front_2158 '($)) (parse-0-263 cont_2155 cont_2156) (let ((input-front_2167 input-front_2158)) 'error)))) (define (parse-0-263 continuations_2160 input_2159) (let ((continuations_2161 continuations_2160)) ((list-ref (cons (lambda (g-5_2162 g-4_2163) (let* ((continuations_2164 continuations_2161) (input_2165 g-4_2163) (element_2166 g-5_2162)) 'you-cannot-see-me)) continuations_2161) 1) 1 input_2159))) (define (shift-terminal-0-247 continuations_2013 input_2012) (let* ((continuations_2014 continuations_2013) (l_2020 continuations_2014) (l_2021 (cdr l_2020))) (parse-1-248 (cons (lambda (g-3_2015 g-2_2016) (let* ((continuations_2017 continuations_2014) (input_2018 g-2_2016) (element_2019 g-3_2015)) 'you-cannot-see-me)) (cons (car l_2020) '())) input_2012))) (define (parse-1-248 continuations_2023 input_2022) (let* ((continuations_2024 continuations_2023) (input_2025 input_2022)) (if #f 'accept (let* ((continuations_2026 continuations_2024) (input_2027 (cdr input_2025)) (element_2028 (car input_2025))) (loop-0-249 input_2025 continuations_2024 element_2028 input_2027 continuations_2026))))) (define (loop-0-249 fail_2033 fail_2032 element_2031 cont_2030 cont_2029) (let ((element_2034 element_2031)) (if (equal? element_2034 'n) (shift-terminal-0-250 cont_2029 cont_2030) (let ((element_2126 element_2034)) (loop-0-260 fail_2033 fail_2032 element_2126 cont_2030 cont_2029))))) (define (loop-0-260 fail_2131 fail_2130 element_2129 cont_2128 cont_2127) (let ((element_2132 element_2129)) (if (equal? element_2132 'l) (shift-terminal-0-261 cont_2127 cont_2128) (let* ((element_2147 element_2132) (l_2148 fail_2131) (l_2149 (cdr l_2148)) (input-front_2150 (cons (car l_2148) '()))) 'error)))) (define (shift-terminal-0-261 continuations_2134 input_2133) (let* ((continuations_2135 continuations_2134) (l_2144 continuations_2135)) (parse-1-78 (cons (lambda (g-3_2136 g-2_2137) (let* ((continuations_2138 continuations_2135) (input_2139 g-2_2137) (element_2140 g-3_2136)) (loop-0-251 element_2140 input_2139 continuations_2138))) '()) input_2133))) (define (shift-terminal-0-250 continuations_2036 input_2035) (let* ((continuations_2037 continuations_2036) (l_2123 continuations_2037)) (parse-1-65 (cons (lambda (g-3_2038 g-2_2039) (let* ((continuations_2040 continuations_2037) (input_2041 g-2_2039) (element_2042 g-3_2038)) (loop-0-251 element_2042 input_2041 continuations_2040))) '()) input_2035))) (define (loop-0-251 element_2045 cont_2044 cont_2043) (let ((element_2046 element_2045)) (if (equal? element_2046 1) (shift-nonterminal-0-252 cont_2043 cont_2044) (let ((element_2084 element_2046)) (loop-0-256 element_2084 cont_2044 cont_2043))))) (define (loop-0-256 element_2087 cont_2086 cont_2085) (let ((element_2088 element_2087)) (if (equal? element_2088 2) (shift-nonterminal-0-257 cont_2085 cont_2086) (let ((element_2103 element_2088)) (loop-0-258 element_2103 cont_2086 cont_2085))))) (define (loop-0-258 element_2106 cont_2105 cont_2104) (let ((element_2107 element_2106)) (if (equal? element_2107 3) (shift-nonterminal-0-259 cont_2104 cont_2105) (let ((element_2122 element_2107)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-259 continuations_2109 input_2108) (let* ((continuations_2110 continuations_2109) (l_2119 continuations_2110)) (parse-1-29 (cons (lambda (g-1_2111 g-0_2112) (let* ((continuations_2113 continuations_2110) (input_2114 g-0_2112) (element_2115 g-1_2111)) (loop-0-251 element_2115 input_2114 continuations_2113))) '()) input_2108))) (define (shift-nonterminal-0-257 continuations_2090 input_2089) (let* ((continuations_2091 continuations_2090) (l_2100 continuations_2091)) (parse-1-14 (cons (lambda (g-1_2092 g-0_2093) (let* ((continuations_2094 continuations_2091) (input_2095 g-0_2093) (element_2096 g-1_2092)) (loop-0-251 element_2096 input_2095 continuations_2094))) '()) input_2089))) (define (shift-nonterminal-0-252 continuations_2048 input_2047) (let* ((continuations_2049 continuations_2048) (l_2058 continuations_2049) (l_2059 (cdr l_2058)) (l_2060 (cdr l_2059))) (parse-1-253 (cons (lambda (g-1_2050 g-0_2051) (let* ((continuations_2052 continuations_2049) (input_2053 g-0_2051) (element_2054 g-1_2050)) (loop-0-251 element_2054 input_2053 continuations_2052))) (cons (car l_2058) (cons (car l_2059) '()))) input_2047))) (define (parse-1-253 continuations_2062 input_2061) (let* ((continuations_2063 continuations_2062) (input_2064 input_2061)) (if #f 'accept (let* ((continuations_2065 continuations_2063) (input_2066 (cdr input_2064)) (element_2067 (car input_2064)) (l_2068 input_2064) (l_2069 (cdr l_2068)) (input-front_2070 (cons (car l_2068) '()))) (loop-0-254 input-front_2070 input_2064 continuations_2063))))) (define (loop-0-254 input-front_2073 cont_2072 cont_2071) (let ((input-front_2074 input-front_2073)) (if (equal? input-front_2074 '($)) (parse-0-255 cont_2071 cont_2072) (let ((input-front_2083 input-front_2074)) 'error)))) (define (parse-0-255 continuations_2076 input_2075) (let ((continuations_2077 continuations_2076)) ((list-ref (cons (lambda (g-5_2078 g-4_2079) (let* ((continuations_2080 continuations_2077) (input_2081 g-4_2079) (element_2082 g-5_2078)) 'you-cannot-see-me)) continuations_2077) 3) 1 input_2075))) (define (shift-terminal-0-16 continuations_120 input_119) (let* ((continuations_121 continuations_120) (l_127 continuations_121) (l_128 (cdr l_127))) (parse-1-17 (cons (lambda (g-3_122 g-2_123) (let* ((continuations_124 continuations_121) (input_125 g-2_123) (element_126 g-3_122)) 'you-cannot-see-me)) (cons (car l_127) '())) input_119))) (define (parse-1-17 continuations_130 input_129) (let* ((continuations_131 continuations_130) (input_132 input_129)) (if #f 'accept (let* ((continuations_133 continuations_131) (input_134 (cdr input_132)) (element_135 (car input_132))) (loop-0-18 input_132 continuations_131 element_135 input_134 continuations_133))))) (define (loop-0-18 fail_140 fail_139 element_138 cont_137 cont_136) (let ((element_141 element_138)) (if (equal? element_141 'n) (shift-terminal-0-19 cont_136 cont_137) (let ((element_1980 element_141)) (loop-0-244 fail_140 fail_139 element_1980 cont_137 cont_136))))) (define (loop-0-244 fail_1985 fail_1984 element_1983 cont_1982 cont_1981) (let ((element_1986 element_1983)) (if (equal? element_1986 'l) (shift-terminal-0-245 cont_1981 cont_1982) (let* ((element_2001 element_1986) (l_2002 fail_1985) (l_2003 (cdr l_2002)) (input-front_2004 (cons (car l_2002) '()))) 'error)))) (define (shift-terminal-0-245 continuations_1988 input_1987) (let* ((continuations_1989 continuations_1988) (l_1998 continuations_1989)) (parse-1-78 (cons (lambda (g-3_1990 g-2_1991) (let* ((continuations_1992 continuations_1989) (input_1993 g-2_1991) (element_1994 g-3_1990)) (loop-0-20 element_1994 input_1993 continuations_1992))) '()) input_1987))) (define (shift-terminal-0-19 continuations_143 input_142) (let* ((continuations_144 continuations_143) (l_1977 continuations_144)) (parse-1-65 (cons (lambda (g-3_145 g-2_146) (let* ((continuations_147 continuations_144) (input_148 g-2_146) (element_149 g-3_145)) (loop-0-20 element_149 input_148 continuations_147))) '()) input_142))) (define (loop-0-20 element_152 cont_151 cont_150) (let ((element_153 element_152)) (if (equal? element_153 1) (shift-nonterminal-0-21 cont_150 cont_151) (let ((element_191 element_153)) (loop-0-25 element_191 cont_151 cont_150))))) (define (loop-0-25 element_194 cont_193 cont_192) (let ((element_195 element_194)) (if (equal? element_195 2) (shift-nonterminal-0-26 cont_192 cont_193) (let ((element_210 element_195)) (loop-0-27 element_210 cont_193 cont_192))))) (define (loop-0-27 element_213 cont_212 cont_211) (let ((element_214 element_213)) (if (equal? element_214 3) (shift-nonterminal-0-28 cont_211 cont_212) (let ((element_1976 element_214)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-28 continuations_216 input_215) (let* ((continuations_217 continuations_216) (l_226 continuations_217)) (parse-1-29 (cons (lambda (g-1_218 g-0_219) (let* ((continuations_220 continuations_217) (input_221 g-0_219) (element_222 g-1_218)) (loop-0-20 element_222 input_221 continuations_220))) '()) input_215))) (define (parse-1-29 continuations_228 input_227) (let* ((continuations_229 continuations_228) (input_230 input_227)) (if #f 'accept (let* ((continuations_231 continuations_229) (input_232 (cdr input_230)) (element_233 (car input_230))) (loop-0-30 input_230 continuations_229 element_233 input_232 continuations_231))))) (define (loop-0-30 fail_238 fail_237 element_236 cont_235 cont_234) (let ((element_239 element_236)) (if (equal? element_239 '/) (shift-terminal-0-31 cont_234 cont_235) (let ((element_1914 element_239)) (loop-0-236 fail_238 fail_237 element_1914 cont_235 cont_234))))) (define (loop-0-236 fail_1919 fail_1918 element_1917 cont_1916 cont_1915) (let ((element_1920 element_1917)) (if (equal? element_1920 '*) (shift-terminal-0-237 cont_1915 cont_1916) (let* ((element_1933 element_1920) (l_1934 fail_1919) (l_1935 (cdr l_1934)) (input-front_1936 (cons (car l_1934) '()))) (loop-0-238 input-front_1936 fail_1919 fail_1918))))) (define (loop-0-238 input-front_1939 cont_1938 cont_1937) (let ((input-front_1940 input-front_1939)) (if (equal? input-front_1940 '($)) (parse-0-239 cont_1937 cont_1938) (let ((input-front_1949 input-front_1940)) (loop-0-240 input-front_1949 cont_1938 cont_1937))))) (define (loop-0-240 input-front_1952 cont_1951 cont_1950) (let ((input-front_1953 input-front_1952)) (if (equal? input-front_1953 '(+)) (parse-0-241 cont_1950 cont_1951) (let ((input-front_1962 input-front_1953)) (loop-0-242 input-front_1962 cont_1951 cont_1950))))) (define (loop-0-242 input-front_1965 cont_1964 cont_1963) (let ((input-front_1966 input-front_1965)) (if (equal? input-front_1966 '(-)) (parse-0-243 cont_1963 cont_1964) (let ((input-front_1975 input-front_1966)) 'error)))) (define (parse-0-243 continuations_1968 input_1967) (let ((continuations_1969 continuations_1968)) ((list-ref (cons (lambda (g-5_1970 g-4_1971) (let* ((continuations_1972 continuations_1969) (input_1973 g-4_1971) (element_1974 g-5_1970)) 'you-cannot-see-me)) continuations_1969) 1) 2 input_1967))) (define (parse-0-241 continuations_1955 input_1954) (let ((continuations_1956 continuations_1955)) ((list-ref (cons (lambda (g-5_1957 g-4_1958) (let* ((continuations_1959 continuations_1956) (input_1960 g-4_1958) (element_1961 g-5_1957)) 'you-cannot-see-me)) continuations_1956) 1) 2 input_1954))) (define (parse-0-239 continuations_1942 input_1941) (let ((continuations_1943 continuations_1942)) ((list-ref (cons (lambda (g-5_1944 g-4_1945) (let* ((continuations_1946 continuations_1943) (input_1947 g-4_1945) (element_1948 g-5_1944)) 'you-cannot-see-me)) continuations_1943) 1) 2 input_1941))) (define (shift-terminal-0-237 continuations_1922 input_1921) (let* ((continuations_1923 continuations_1922) (l_1929 continuations_1923) (l_1930 (cdr l_1929))) (parse-1-51 (cons (lambda (g-3_1924 g-2_1925) (let* ((continuations_1926 continuations_1923) (input_1927 g-2_1925) (element_1928 g-3_1924)) 'you-cannot-see-me)) (cons (car l_1929) '())) input_1921))) (define (shift-terminal-0-31 continuations_241 input_240) (let* ((continuations_242 continuations_241) (l_248 continuations_242) (l_249 (cdr l_248))) (parse-1-32 (cons (lambda (g-3_243 g-2_244) (let* ((continuations_245 continuations_242) (input_246 g-2_244) (element_247 g-3_243)) 'you-cannot-see-me)) (cons (car l_248) '())) input_240))) (define (parse-1-32 continuations_251 input_250) (let* ((continuations_252 continuations_251) (input_253 input_250)) (if #f 'accept (let* ((continuations_254 continuations_252) (input_255 (cdr input_253)) (element_256 (car input_253))) (loop-0-33 input_253 continuations_252 element_256 input_255 continuations_254))))) (define (loop-0-33 fail_261 fail_260 element_259 cont_258 cont_257) (let ((element_262 element_259)) (if (equal? element_262 'n) (shift-terminal-0-34 cont_257 cont_258) (let ((element_1889 element_262)) (loop-0-234 fail_261 fail_260 element_1889 cont_258 cont_257))))) (define (loop-0-234 fail_1894 fail_1893 element_1892 cont_1891 cont_1890) (let ((element_1895 element_1892)) (if (equal? element_1895 'l) (shift-terminal-0-235 cont_1890 cont_1891) (let* ((element_1910 element_1895) (l_1911 fail_1894) (l_1912 (cdr l_1911)) (input-front_1913 (cons (car l_1911) '()))) 'error)))) (define (shift-terminal-0-235 continuations_1897 input_1896) (let* ((continuations_1898 continuations_1897) (l_1907 continuations_1898)) (parse-1-78 (cons (lambda (g-3_1899 g-2_1900) (let* ((continuations_1901 continuations_1898) (input_1902 g-2_1900) (element_1903 g-3_1899)) (loop-0-35 element_1903 input_1902 continuations_1901))) '()) input_1896))) (define (shift-terminal-0-34 continuations_264 input_263) (let* ((continuations_265 continuations_264) (l_1886 continuations_265)) (parse-1-65 (cons (lambda (g-3_266 g-2_267) (let* ((continuations_268 continuations_265) (input_269 g-2_267) (element_270 g-3_266)) (loop-0-35 element_270 input_269 continuations_268))) '()) input_263))) (define (loop-0-35 element_273 cont_272 cont_271) (let ((element_274 element_273)) (if (equal? element_274 2) (shift-nonterminal-0-36 cont_271 cont_272) (let ((element_338 element_274)) (loop-0-44 element_338 cont_272 cont_271))))) (define (loop-0-44 element_341 cont_340 cont_339) (let ((element_342 element_341)) (if (equal? element_342 3) (shift-nonterminal-0-45 cont_339 cont_340) (let ((element_1885 element_342)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-45 continuations_344 input_343) (let* ((continuations_345 continuations_344) (l_354 continuations_345)) (parse-1-46 (cons (lambda (g-1_346 g-0_347) (let* ((continuations_348 continuations_345) (input_349 g-0_347) (element_350 g-1_346)) (loop-0-35 element_350 input_349 continuations_348))) '()) input_343))) (define (parse-1-46 continuations_356 input_355) (let* ((continuations_357 continuations_356) (input_358 input_355)) (if #f 'accept (let* ((continuations_359 continuations_357) (input_360 (cdr input_358)) (element_361 (car input_358))) (loop-0-47 input_358 continuations_357 element_361 input_360 continuations_359))))) (define (loop-0-47 fail_366 fail_365 element_364 cont_363 cont_362) (let ((element_367 element_364)) (if (equal? element_367 '/) (shift-terminal-0-48 cont_362 cont_363) (let ((element_380 element_367)) (loop-0-49 fail_366 fail_365 element_380 cont_363 cont_362))))) (define (loop-0-49 fail_385 fail_384 element_383 cont_382 cont_381) (let ((element_386 element_383)) (if (equal? element_386 '*) (shift-terminal-0-50 cont_381 cont_382) (let* ((element_1842 element_386) (l_1843 fail_385) (l_1844 (cdr l_1843)) (input-front_1845 (cons (car l_1843) '()))) (loop-0-228 input-front_1845 fail_385 fail_384))))) (define (loop-0-228 input-front_1848 cont_1847 cont_1846) (let ((input-front_1849 input-front_1848)) (if (equal? input-front_1849 '($)) (parse-0-229 cont_1846 cont_1847) (let ((input-front_1858 input-front_1849)) (loop-0-230 input-front_1858 cont_1847 cont_1846))))) (define (loop-0-230 input-front_1861 cont_1860 cont_1859) (let ((input-front_1862 input-front_1861)) (if (equal? input-front_1862 '(+)) (parse-0-231 cont_1859 cont_1860) (let ((input-front_1871 input-front_1862)) (loop-0-232 input-front_1871 cont_1860 cont_1859))))) (define (loop-0-232 input-front_1874 cont_1873 cont_1872) (let ((input-front_1875 input-front_1874)) (if (equal? input-front_1875 '(-)) (parse-0-233 cont_1872 cont_1873) (let ((input-front_1884 input-front_1875)) 'error)))) (define (parse-0-233 continuations_1877 input_1876) (let ((continuations_1878 continuations_1877)) ((list-ref (cons (lambda (g-5_1879 g-4_1880) (let* ((continuations_1881 continuations_1878) (input_1882 g-4_1880) (element_1883 g-5_1879)) 'you-cannot-see-me)) continuations_1878) 1) 2 input_1876))) (define (parse-0-231 continuations_1864 input_1863) (let ((continuations_1865 continuations_1864)) ((list-ref (cons (lambda (g-5_1866 g-4_1867) (let* ((continuations_1868 continuations_1865) (input_1869 g-4_1867) (element_1870 g-5_1866)) 'you-cannot-see-me)) continuations_1865) 1) 2 input_1863))) (define (parse-0-229 continuations_1851 input_1850) (let ((continuations_1852 continuations_1851)) ((list-ref (cons (lambda (g-5_1853 g-4_1854) (let* ((continuations_1855 continuations_1852) (input_1856 g-4_1854) (element_1857 g-5_1853)) 'you-cannot-see-me)) continuations_1852) 1) 2 input_1850))) (define (shift-terminal-0-50 continuations_388 input_387) (let* ((continuations_389 continuations_388) (l_395 continuations_389) (l_396 (cdr l_395))) (parse-1-51 (cons (lambda (g-3_390 g-2_391) (let* ((continuations_392 continuations_389) (input_393 g-2_391) (element_394 g-3_390)) 'you-cannot-see-me)) (cons (car l_395) '())) input_387))) (define (parse-1-51 continuations_398 input_397) (let* ((continuations_399 continuations_398) (input_400 input_397)) (if #f 'accept (let* ((continuations_401 continuations_399) (input_402 (cdr input_400)) (element_403 (car input_400))) (loop-0-52 input_400 continuations_399 element_403 input_402 continuations_401))))) (define (loop-0-52 fail_408 fail_407 element_406 cont_405 cont_404) (let ((element_409 element_406)) (if (equal? element_409 'n) (shift-terminal-0-53 cont_404 cont_405) (let ((element_581 element_409)) (loop-0-76 fail_408 fail_407 element_581 cont_405 cont_404))))) (define (loop-0-76 fail_586 fail_585 element_584 cont_583 cont_582) (let ((element_587 element_584)) (if (equal? element_587 'l) (shift-terminal-0-77 cont_582 cont_583) (let* ((element_1838 element_587) (l_1839 fail_586) (l_1840 (cdr l_1839)) (input-front_1841 (cons (car l_1839) '()))) 'error)))) (define (shift-terminal-0-77 continuations_589 input_588) (let* ((continuations_590 continuations_589) (l_599 continuations_590)) (parse-1-78 (cons (lambda (g-3_591 g-2_592) (let* ((continuations_593 continuations_590) (input_594 g-2_592) (element_595 g-3_591)) (loop-0-54 element_595 input_594 continuations_593))) '()) input_588))) (define (parse-1-78 continuations_601 input_600) (let* ((continuations_602 continuations_601) (input_603 input_600)) (if #f 'accept (let* ((continuations_604 continuations_602) (input_605 (cdr input_603)) (element_606 (car input_603))) (loop-0-79 input_603 continuations_602 element_606 input_605 continuations_604))))) (define (loop-0-79 fail_611 fail_610 element_609 cont_608 cont_607) (let ((element_612 element_609)) (if (equal? element_612 'n) (shift-terminal-0-80 cont_607 cont_608) (let ((element_1813 element_612)) (loop-0-226 fail_611 fail_610 element_1813 cont_608 cont_607))))) (define (loop-0-226 fail_1818 fail_1817 element_1816 cont_1815 cont_1814) (let ((element_1819 element_1816)) (if (equal? element_1819 'l) (shift-terminal-0-227 cont_1814 cont_1815) (let* ((element_1834 element_1819) (l_1835 fail_1818) (l_1836 (cdr l_1835)) (input-front_1837 (cons (car l_1835) '()))) 'error)))) (define (shift-terminal-0-227 continuations_1821 input_1820) (let* ((continuations_1822 continuations_1821) (l_1831 continuations_1822)) (parse-1-163 (cons (lambda (g-3_1823 g-2_1824) (let* ((continuations_1825 continuations_1822) (input_1826 g-2_1824) (element_1827 g-3_1823)) (loop-0-81 element_1827 input_1826 continuations_1825))) '()) input_1820))) (define (shift-terminal-0-80 continuations_614 input_613) (let* ((continuations_615 continuations_614) (l_1810 continuations_615)) (parse-1-150 (cons (lambda (g-3_616 g-2_617) (let* ((continuations_618 continuations_615) (input_619 g-2_617) (element_620 g-3_616)) (loop-0-81 element_620 input_619 continuations_618))) '()) input_613))) (define (loop-0-81 element_623 cont_622 cont_621) (let ((element_624 element_623)) (if (equal? element_624 1) (shift-nonterminal-0-82 cont_621 cont_622) (let ((element_741 element_624)) (loop-0-97 element_741 cont_622 cont_621))))) (define (loop-0-97 element_744 cont_743 cont_742) (let ((element_745 element_744)) (if (equal? element_745 2) (shift-nonterminal-0-98 cont_742 cont_743) (let ((element_1790 element_745)) (loop-0-224 element_1790 cont_743 cont_742))))) (define (loop-0-224 element_1793 cont_1792 cont_1791) (let ((element_1794 element_1793)) (if (equal? element_1794 3) (shift-nonterminal-0-225 cont_1791 cont_1792) (let ((element_1809 element_1794)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-225 continuations_1796 input_1795) (let* ((continuations_1797 continuations_1796) (l_1806 continuations_1797)) (parse-1-114 (cons (lambda (g-1_1798 g-0_1799) (let* ((continuations_1800 continuations_1797) (input_1801 g-0_1799) (element_1802 g-1_1798)) (loop-0-81 element_1802 input_1801 continuations_1800))) '()) input_1795))) (define (shift-nonterminal-0-98 continuations_747 input_746) (let* ((continuations_748 continuations_747) (l_757 continuations_748)) (parse-1-99 (cons (lambda (g-1_749 g-0_750) (let* ((continuations_751 continuations_748) (input_752 g-0_750) (element_753 g-1_749)) (loop-0-81 element_753 input_752 continuations_751))) '()) input_746))) (define (parse-1-99 continuations_759 input_758) (let* ((continuations_760 continuations_759) (input_761 input_758)) (if #f 'accept (let* ((continuations_762 continuations_760) (input_763 (cdr input_761)) (element_764 (car input_761))) (loop-0-100 input_761 continuations_760 element_764 input_763 continuations_762))))) (define (loop-0-100 fail_769 fail_768 element_767 cont_766 cont_765) (let ((element_770 element_767)) (if (equal? element_770 '-) (shift-terminal-0-101 cont_765 cont_766) (let ((element_1627 element_770)) (loop-0-206 fail_769 fail_768 element_1627 cont_766 cont_765))))) (define (loop-0-206 fail_1632 fail_1631 element_1630 cont_1629 cont_1628) (let ((element_1633 element_1630)) (if (equal? element_1633 '+) (shift-terminal-0-207 cont_1628 cont_1629) (let* ((element_1773 element_1633) (l_1774 fail_1632) (l_1775 (cdr l_1774)) (input-front_1776 (cons (car l_1774) '()))) (loop-0-222 input-front_1776 fail_1632 fail_1631))))) (define (loop-0-222 input-front_1779 cont_1778 cont_1777) (let ((input-front_1780 input-front_1779)) (if (equal? input-front_1780 '(r)) (parse-0-223 cont_1777 cont_1778) (let ((input-front_1789 input-front_1780)) 'error)))) (define (parse-0-223 continuations_1782 input_1781) (let ((continuations_1783 continuations_1782)) ((list-ref (cons (lambda (g-5_1784 g-4_1785) (let* ((continuations_1786 continuations_1783) (input_1787 g-4_1785) (element_1788 g-5_1784)) 'you-cannot-see-me)) continuations_1783) 1) 1 input_1781))) (define (shift-terminal-0-207 continuations_1635 input_1634) (let* ((continuations_1636 continuations_1635) (l_1642 continuations_1636) (l_1643 (cdr l_1642))) (parse-1-208 (cons (lambda (g-3_1637 g-2_1638) (let* ((continuations_1639 continuations_1636) (input_1640 g-2_1638) (element_1641 g-3_1637)) 'you-cannot-see-me)) (cons (car l_1642) '())) input_1634))) (define (parse-1-208 continuations_1645 input_1644) (let* ((continuations_1646 continuations_1645) (input_1647 input_1644)) (if #f 'accept (let* ((continuations_1648 continuations_1646) (input_1649 (cdr input_1647)) (element_1650 (car input_1647))) (loop-0-209 input_1647 continuations_1646 element_1650 input_1649 continuations_1648))))) (define (loop-0-209 fail_1655 fail_1654 element_1653 cont_1652 cont_1651) (let ((element_1656 element_1653)) (if (equal? element_1656 'n) (shift-terminal-0-210 cont_1651 cont_1652) (let ((element_1748 element_1656)) (loop-0-220 fail_1655 fail_1654 element_1748 cont_1652 cont_1651))))) (define (loop-0-220 fail_1753 fail_1752 element_1751 cont_1750 cont_1749) (let ((element_1754 element_1751)) (if (equal? element_1754 'l) (shift-terminal-0-221 cont_1749 cont_1750) (let* ((element_1769 element_1754) (l_1770 fail_1753) (l_1771 (cdr l_1770)) (input-front_1772 (cons (car l_1770) '()))) 'error)))) (define (shift-terminal-0-221 continuations_1756 input_1755) (let* ((continuations_1757 continuations_1756) (l_1766 continuations_1757)) (parse-1-163 (cons (lambda (g-3_1758 g-2_1759) (let* ((continuations_1760 continuations_1757) (input_1761 g-2_1759) (element_1762 g-3_1758)) (loop-0-211 element_1762 input_1761 continuations_1760))) '()) input_1755))) (define (shift-terminal-0-210 continuations_1658 input_1657) (let* ((continuations_1659 continuations_1658) (l_1745 continuations_1659)) (parse-1-150 (cons (lambda (g-3_1660 g-2_1661) (let* ((continuations_1662 continuations_1659) (input_1663 g-2_1661) (element_1664 g-3_1660)) (loop-0-211 element_1664 input_1663 continuations_1662))) '()) input_1657))) (define (loop-0-211 element_1667 cont_1666 cont_1665) (let ((element_1668 element_1667)) (if (equal? element_1668 1) (shift-nonterminal-0-212 cont_1665 cont_1666) (let ((element_1706 element_1668)) (loop-0-216 element_1706 cont_1666 cont_1665))))) (define (loop-0-216 element_1709 cont_1708 cont_1707) (let ((element_1710 element_1709)) (if (equal? element_1710 2) (shift-nonterminal-0-217 cont_1707 cont_1708) (let ((element_1725 element_1710)) (loop-0-218 element_1725 cont_1708 cont_1707))))) (define (loop-0-218 element_1728 cont_1727 cont_1726) (let ((element_1729 element_1728)) (if (equal? element_1729 3) (shift-nonterminal-0-219 cont_1726 cont_1727) (let ((element_1744 element_1729)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-219 continuations_1731 input_1730) (let* ((continuations_1732 continuations_1731) (l_1741 continuations_1732)) (parse-1-114 (cons (lambda (g-1_1733 g-0_1734) (let* ((continuations_1735 continuations_1732) (input_1736 g-0_1734) (element_1737 g-1_1733)) (loop-0-211 element_1737 input_1736 continuations_1735))) '()) input_1730))) (define (shift-nonterminal-0-217 continuations_1712 input_1711) (let* ((continuations_1713 continuations_1712) (l_1722 continuations_1713)) (parse-1-99 (cons (lambda (g-1_1714 g-0_1715) (let* ((continuations_1716 continuations_1713) (input_1717 g-0_1715) (element_1718 g-1_1714)) (loop-0-211 element_1718 input_1717 continuations_1716))) '()) input_1711))) (define (shift-nonterminal-0-212 continuations_1670 input_1669) (let* ((continuations_1671 continuations_1670) (l_1680 continuations_1671) (l_1681 (cdr l_1680)) (l_1682 (cdr l_1681))) (parse-1-213 (cons (lambda (g-1_1672 g-0_1673) (let* ((continuations_1674 continuations_1671) (input_1675 g-0_1673) (element_1676 g-1_1672)) (loop-0-211 element_1676 input_1675 continuations_1674))) (cons (car l_1680) (cons (car l_1681) '()))) input_1669))) (define (parse-1-213 continuations_1684 input_1683) (let* ((continuations_1685 continuations_1684) (input_1686 input_1683)) (if #f 'accept (let* ((continuations_1687 continuations_1685) (input_1688 (cdr input_1686)) (element_1689 (car input_1686)) (l_1690 input_1686) (l_1691 (cdr l_1690)) (input-front_1692 (cons (car l_1690) '()))) (loop-0-214 input-front_1692 input_1686 continuations_1685))))) (define (loop-0-214 input-front_1695 cont_1694 cont_1693) (let ((input-front_1696 input-front_1695)) (if (equal? input-front_1696 '(r)) (parse-0-215 cont_1693 cont_1694) (let ((input-front_1705 input-front_1696)) 'error)))) (define (parse-0-215 continuations_1698 input_1697) (let ((continuations_1699 continuations_1698)) ((list-ref (cons (lambda (g-5_1700 g-4_1701) (let* ((continuations_1702 continuations_1699) (input_1703 g-4_1701) (element_1704 g-5_1700)) 'you-cannot-see-me)) continuations_1699) 3) 1 input_1697))) (define (shift-terminal-0-101 continuations_772 input_771) (let* ((continuations_773 continuations_772) (l_779 continuations_773) (l_780 (cdr l_779))) (parse-1-102 (cons (lambda (g-3_774 g-2_775) (let* ((continuations_776 continuations_773) (input_777 g-2_775) (element_778 g-3_774)) 'you-cannot-see-me)) (cons (car l_779) '())) input_771))) (define (parse-1-102 continuations_782 input_781) (let* ((continuations_783 continuations_782) (input_784 input_781)) (if #f 'accept (let* ((continuations_785 continuations_783) (input_786 (cdr input_784)) (element_787 (car input_784))) (loop-0-103 input_784 continuations_783 element_787 input_786 continuations_785))))) (define (loop-0-103 fail_792 fail_791 element_790 cont_789 cont_788) (let ((element_793 element_790)) (if (equal? element_793 'n) (shift-terminal-0-104 cont_788 cont_789) (let ((element_1602 element_793)) (loop-0-204 fail_792 fail_791 element_1602 cont_789 cont_788))))) (define (loop-0-204 fail_1607 fail_1606 element_1605 cont_1604 cont_1603) (let ((element_1608 element_1605)) (if (equal? element_1608 'l) (shift-terminal-0-205 cont_1603 cont_1604) (let* ((element_1623 element_1608) (l_1624 fail_1607) (l_1625 (cdr l_1624)) (input-front_1626 (cons (car l_1624) '()))) 'error)))) (define (shift-terminal-0-205 continuations_1610 input_1609) (let* ((continuations_1611 continuations_1610) (l_1620 continuations_1611)) (parse-1-163 (cons (lambda (g-3_1612 g-2_1613) (let* ((continuations_1614 continuations_1611) (input_1615 g-2_1613) (element_1616 g-3_1612)) (loop-0-105 element_1616 input_1615 continuations_1614))) '()) input_1609))) (define (shift-terminal-0-104 continuations_795 input_794) (let* ((continuations_796 continuations_795) (l_1599 continuations_796)) (parse-1-150 (cons (lambda (g-3_797 g-2_798) (let* ((continuations_799 continuations_796) (input_800 g-2_798) (element_801 g-3_797)) (loop-0-105 element_801 input_800 continuations_799))) '()) input_794))) (define (loop-0-105 element_804 cont_803 cont_802) (let ((element_805 element_804)) (if (equal? element_805 1) (shift-nonterminal-0-106 cont_802 cont_803) (let ((element_843 element_805)) (loop-0-110 element_843 cont_803 cont_802))))) (define (loop-0-110 element_846 cont_845 cont_844) (let ((element_847 element_846)) (if (equal? element_847 2) (shift-nonterminal-0-111 cont_844 cont_845) (let ((element_862 element_847)) (loop-0-112 element_862 cont_845 cont_844))))) (define (loop-0-112 element_865 cont_864 cont_863) (let ((element_866 element_865)) (if (equal? element_866 3) (shift-nonterminal-0-113 cont_863 cont_864) (let ((element_1598 element_866)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-113 continuations_868 input_867) (let* ((continuations_869 continuations_868) (l_878 continuations_869)) (parse-1-114 (cons (lambda (g-1_870 g-0_871) (let* ((continuations_872 continuations_869) (input_873 g-0_871) (element_874 g-1_870)) (loop-0-105 element_874 input_873 continuations_872))) '()) input_867))) (define (parse-1-114 continuations_880 input_879) (let* ((continuations_881 continuations_880) (input_882 input_879)) (if #f 'accept (let* ((continuations_883 continuations_881) (input_884 (cdr input_882)) (element_885 (car input_882))) (loop-0-115 input_882 continuations_881 element_885 input_884 continuations_883))))) (define (loop-0-115 fail_890 fail_889 element_888 cont_887 cont_886) (let ((element_891 element_888)) (if (equal? element_891 '/) (shift-terminal-0-116 cont_886 cont_887) (let ((element_1536 element_891)) (loop-0-196 fail_890 fail_889 element_1536 cont_887 cont_886))))) (define (loop-0-196 fail_1541 fail_1540 element_1539 cont_1538 cont_1537) (let ((element_1542 element_1539)) (if (equal? element_1542 '*) (shift-terminal-0-197 cont_1537 cont_1538) (let* ((element_1555 element_1542) (l_1556 fail_1541) (l_1557 (cdr l_1556)) (input-front_1558 (cons (car l_1556) '()))) (loop-0-198 input-front_1558 fail_1541 fail_1540))))) (define (loop-0-198 input-front_1561 cont_1560 cont_1559) (let ((input-front_1562 input-front_1561)) (if (equal? input-front_1562 '(+)) (parse-0-199 cont_1559 cont_1560) (let ((input-front_1571 input-front_1562)) (loop-0-200 input-front_1571 cont_1560 cont_1559))))) (define (loop-0-200 input-front_1574 cont_1573 cont_1572) (let ((input-front_1575 input-front_1574)) (if (equal? input-front_1575 '(r)) (parse-0-201 cont_1572 cont_1573) (let ((input-front_1584 input-front_1575)) (loop-0-202 input-front_1584 cont_1573 cont_1572))))) (define (loop-0-202 input-front_1587 cont_1586 cont_1585) (let ((input-front_1588 input-front_1587)) (if (equal? input-front_1588 '(-)) (parse-0-203 cont_1585 cont_1586) (let ((input-front_1597 input-front_1588)) 'error)))) (define (parse-0-203 continuations_1590 input_1589) (let ((continuations_1591 continuations_1590)) ((list-ref (cons (lambda (g-5_1592 g-4_1593) (let* ((continuations_1594 continuations_1591) (input_1595 g-4_1593) (element_1596 g-5_1592)) 'you-cannot-see-me)) continuations_1591) 1) 2 input_1589))) (define (parse-0-201 continuations_1577 input_1576) (let ((continuations_1578 continuations_1577)) ((list-ref (cons (lambda (g-5_1579 g-4_1580) (let* ((continuations_1581 continuations_1578) (input_1582 g-4_1580) (element_1583 g-5_1579)) 'you-cannot-see-me)) continuations_1578) 1) 2 input_1576))) (define (parse-0-199 continuations_1564 input_1563) (let ((continuations_1565 continuations_1564)) ((list-ref (cons (lambda (g-5_1566 g-4_1567) (let* ((continuations_1568 continuations_1565) (input_1569 g-4_1567) (element_1570 g-5_1566)) 'you-cannot-see-me)) continuations_1565) 1) 2 input_1563))) (define (shift-terminal-0-197 continuations_1544 input_1543) (let* ((continuations_1545 continuations_1544) (l_1551 continuations_1545) (l_1552 (cdr l_1551))) (parse-1-136 (cons (lambda (g-3_1546 g-2_1547) (let* ((continuations_1548 continuations_1545) (input_1549 g-2_1547) (element_1550 g-3_1546)) 'you-cannot-see-me)) (cons (car l_1551) '())) input_1543))) (define (shift-terminal-0-116 continuations_893 input_892) (let* ((continuations_894 continuations_893) (l_900 continuations_894) (l_901 (cdr l_900))) (parse-1-117 (cons (lambda (g-3_895 g-2_896) (let* ((continuations_897 continuations_894) (input_898 g-2_896) (element_899 g-3_895)) 'you-cannot-see-me)) (cons (car l_900) '())) input_892))) (define (parse-1-117 continuations_903 input_902) (let* ((continuations_904 continuations_903) (input_905 input_902)) (if #f 'accept (let* ((continuations_906 continuations_904) (input_907 (cdr input_905)) (element_908 (car input_905))) (loop-0-118 input_905 continuations_904 element_908 input_907 continuations_906))))) (define (loop-0-118 fail_913 fail_912 element_911 cont_910 cont_909) (let ((element_914 element_911)) (if (equal? element_914 'n) (shift-terminal-0-119 cont_909 cont_910) (let ((element_1511 element_914)) (loop-0-194 fail_913 fail_912 element_1511 cont_910 cont_909))))) (define (loop-0-194 fail_1516 fail_1515 element_1514 cont_1513 cont_1512) (let ((element_1517 element_1514)) (if (equal? element_1517 'l) (shift-terminal-0-195 cont_1512 cont_1513) (let* ((element_1532 element_1517) (l_1533 fail_1516) (l_1534 (cdr l_1533)) (input-front_1535 (cons (car l_1533) '()))) 'error)))) (define (shift-terminal-0-195 continuations_1519 input_1518) (let* ((continuations_1520 continuations_1519) (l_1529 continuations_1520)) (parse-1-163 (cons (lambda (g-3_1521 g-2_1522) (let* ((continuations_1523 continuations_1520) (input_1524 g-2_1522) (element_1525 g-3_1521)) (loop-0-120 element_1525 input_1524 continuations_1523))) '()) input_1518))) (define (shift-terminal-0-119 continuations_916 input_915) (let* ((continuations_917 continuations_916) (l_1508 continuations_917)) (parse-1-150 (cons (lambda (g-3_918 g-2_919) (let* ((continuations_920 continuations_917) (input_921 g-2_919) (element_922 g-3_918)) (loop-0-120 element_922 input_921 continuations_920))) '()) input_915))) (define (loop-0-120 element_925 cont_924 cont_923) (let ((element_926 element_925)) (if (equal? element_926 2) (shift-nonterminal-0-121 cont_923 cont_924) (let ((element_990 element_926)) (loop-0-129 element_990 cont_924 cont_923))))) (define (loop-0-129 element_993 cont_992 cont_991) (let ((element_994 element_993)) (if (equal? element_994 3) (shift-nonterminal-0-130 cont_991 cont_992) (let ((element_1507 element_994)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-130 continuations_996 input_995) (let* ((continuations_997 continuations_996) (l_1006 continuations_997)) (parse-1-131 (cons (lambda (g-1_998 g-0_999) (let* ((continuations_1000 continuations_997) (input_1001 g-0_999) (element_1002 g-1_998)) (loop-0-120 element_1002 input_1001 continuations_1000))) '()) input_995))) (define (parse-1-131 continuations_1008 input_1007) (let* ((continuations_1009 continuations_1008) (input_1010 input_1007)) (if #f 'accept (let* ((continuations_1011 continuations_1009) (input_1012 (cdr input_1010)) (element_1013 (car input_1010))) (loop-0-132 input_1010 continuations_1009 element_1013 input_1012 continuations_1011))))) (define (loop-0-132 fail_1018 fail_1017 element_1016 cont_1015 cont_1014) (let ((element_1019 element_1016)) (if (equal? element_1019 '/) (shift-terminal-0-133 cont_1014 cont_1015) (let ((element_1032 element_1019)) (loop-0-134 fail_1018 fail_1017 element_1032 cont_1015 cont_1014))))) (define (loop-0-134 fail_1037 fail_1036 element_1035 cont_1034 cont_1033) (let ((element_1038 element_1035)) (if (equal? element_1038 '*) (shift-terminal-0-135 cont_1033 cont_1034) (let* ((element_1464 element_1038) (l_1465 fail_1037) (l_1466 (cdr l_1465)) (input-front_1467 (cons (car l_1465) '()))) (loop-0-188 input-front_1467 fail_1037 fail_1036))))) (define (loop-0-188 input-front_1470 cont_1469 cont_1468) (let ((input-front_1471 input-front_1470)) (if (equal? input-front_1471 '(+)) (parse-0-189 cont_1468 cont_1469) (let ((input-front_1480 input-front_1471)) (loop-0-190 input-front_1480 cont_1469 cont_1468))))) (define (loop-0-190 input-front_1483 cont_1482 cont_1481) (let ((input-front_1484 input-front_1483)) (if (equal? input-front_1484 '(-)) (parse-0-191 cont_1481 cont_1482) (let ((input-front_1493 input-front_1484)) (loop-0-192 input-front_1493 cont_1482 cont_1481))))) (define (loop-0-192 input-front_1496 cont_1495 cont_1494) (let ((input-front_1497 input-front_1496)) (if (equal? input-front_1497 '(r)) (parse-0-193 cont_1494 cont_1495) (let ((input-front_1506 input-front_1497)) 'error)))) (define (parse-0-193 continuations_1499 input_1498) (let ((continuations_1500 continuations_1499)) ((list-ref (cons (lambda (g-5_1501 g-4_1502) (let* ((continuations_1503 continuations_1500) (input_1504 g-4_1502) (element_1505 g-5_1501)) 'you-cannot-see-me)) continuations_1500) 1) 2 input_1498))) (define (parse-0-191 continuations_1486 input_1485) (let ((continuations_1487 continuations_1486)) ((list-ref (cons (lambda (g-5_1488 g-4_1489) (let* ((continuations_1490 continuations_1487) (input_1491 g-4_1489) (element_1492 g-5_1488)) 'you-cannot-see-me)) continuations_1487) 1) 2 input_1485))) (define (parse-0-189 continuations_1473 input_1472) (let ((continuations_1474 continuations_1473)) ((list-ref (cons (lambda (g-5_1475 g-4_1476) (let* ((continuations_1477 continuations_1474) (input_1478 g-4_1476) (element_1479 g-5_1475)) 'you-cannot-see-me)) continuations_1474) 1) 2 input_1472))) (define (shift-terminal-0-135 continuations_1040 input_1039) (let* ((continuations_1041 continuations_1040) (l_1047 continuations_1041) (l_1048 (cdr l_1047))) (parse-1-136 (cons (lambda (g-3_1042 g-2_1043) (let* ((continuations_1044 continuations_1041) (input_1045 g-2_1043) (element_1046 g-3_1042)) 'you-cannot-see-me)) (cons (car l_1047) '())) input_1039))) (define (parse-1-136 continuations_1050 input_1049) (let* ((continuations_1051 continuations_1050) (input_1052 input_1049)) (if #f 'accept (let* ((continuations_1053 continuations_1051) (input_1054 (cdr input_1052)) (element_1055 (car input_1052))) (loop-0-137 input_1052 continuations_1051 element_1055 input_1054 continuations_1053))))) (define (loop-0-137 fail_1060 fail_1059 element_1058 cont_1057 cont_1056) (let ((element_1061 element_1058)) (if (equal? element_1061 'n) (shift-terminal-0-138 cont_1056 cont_1057) (let ((element_1233 element_1061)) (loop-0-161 fail_1060 fail_1059 element_1233 cont_1057 cont_1056))))) (define (loop-0-161 fail_1238 fail_1237 element_1236 cont_1235 cont_1234) (let ((element_1239 element_1236)) (if (equal? element_1239 'l) (shift-terminal-0-162 cont_1234 cont_1235) (let* ((element_1460 element_1239) (l_1461 fail_1238) (l_1462 (cdr l_1461)) (input-front_1463 (cons (car l_1461) '()))) 'error)))) (define (shift-terminal-0-162 continuations_1241 input_1240) (let* ((continuations_1242 continuations_1241) (l_1251 continuations_1242)) (parse-1-163 (cons (lambda (g-3_1243 g-2_1244) (let* ((continuations_1245 continuations_1242) (input_1246 g-2_1244) (element_1247 g-3_1243)) (loop-0-139 element_1247 input_1246 continuations_1245))) '()) input_1240))) (define (parse-1-163 continuations_1253 input_1252) (let* ((continuations_1254 continuations_1253) (input_1255 input_1252)) (if #f 'accept (let* ((continuations_1256 continuations_1254) (input_1257 (cdr input_1255)) (element_1258 (car input_1255))) (loop-0-164 input_1255 continuations_1254 element_1258 input_1257 continuations_1256))))) (define (loop-0-164 fail_1263 fail_1262 element_1261 cont_1260 cont_1259) (let ((element_1264 element_1261)) (if (equal? element_1264 'n) (shift-terminal-0-165 cont_1259 cont_1260) (let ((element_1435 element_1264)) (loop-0-186 fail_1263 fail_1262 element_1435 cont_1260 cont_1259))))) (define (loop-0-186 fail_1440 fail_1439 element_1438 cont_1437 cont_1436) (let ((element_1441 element_1438)) (if (equal? element_1441 'l) (shift-terminal-0-187 cont_1436 cont_1437) (let* ((element_1456 element_1441) (l_1457 fail_1440) (l_1458 (cdr l_1457)) (input-front_1459 (cons (car l_1457) '()))) 'error)))) (define (shift-terminal-0-187 continuations_1443 input_1442) (let* ((continuations_1444 continuations_1443) (l_1453 continuations_1444)) (parse-1-163 (cons (lambda (g-3_1445 g-2_1446) (let* ((continuations_1447 continuations_1444) (input_1448 g-2_1446) (element_1449 g-3_1445)) (loop-0-166 element_1449 input_1448 continuations_1447))) '()) input_1442))) (define (shift-terminal-0-165 continuations_1266 input_1265) (let* ((continuations_1267 continuations_1266) (l_1432 continuations_1267)) (parse-1-150 (cons (lambda (g-3_1268 g-2_1269) (let* ((continuations_1270 continuations_1267) (input_1271 g-2_1269) (element_1272 g-3_1268)) (loop-0-166 element_1272 input_1271 continuations_1270))) '()) input_1265))) (define (loop-0-166 element_1275 cont_1274 cont_1273) (let ((element_1276 element_1275)) (if (equal? element_1276 1) (shift-nonterminal-0-167 cont_1273 cont_1274) (let ((element_1393 element_1276)) (loop-0-182 element_1393 cont_1274 cont_1273))))) (define (loop-0-182 element_1396 cont_1395 cont_1394) (let ((element_1397 element_1396)) (if (equal? element_1397 2) (shift-nonterminal-0-183 cont_1394 cont_1395) (let ((element_1412 element_1397)) (loop-0-184 element_1412 cont_1395 cont_1394))))) (define (loop-0-184 element_1415 cont_1414 cont_1413) (let ((element_1416 element_1415)) (if (equal? element_1416 3) (shift-nonterminal-0-185 cont_1413 cont_1414) (let ((element_1431 element_1416)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-185 continuations_1418 input_1417) (let* ((continuations_1419 continuations_1418) (l_1428 continuations_1419)) (parse-1-114 (cons (lambda (g-1_1420 g-0_1421) (let* ((continuations_1422 continuations_1419) (input_1423 g-0_1421) (element_1424 g-1_1420)) (loop-0-166 element_1424 input_1423 continuations_1422))) '()) input_1417))) (define (shift-nonterminal-0-183 continuations_1399 input_1398) (let* ((continuations_1400 continuations_1399) (l_1409 continuations_1400)) (parse-1-99 (cons (lambda (g-1_1401 g-0_1402) (let* ((continuations_1403 continuations_1400) (input_1404 g-0_1402) (element_1405 g-1_1401)) (loop-0-166 element_1405 input_1404 continuations_1403))) '()) input_1398))) (define (shift-nonterminal-0-167 continuations_1278 input_1277) (let* ((continuations_1279 continuations_1278) (l_1288 continuations_1279) (l_1289 (cdr l_1288))) (parse-1-168 (cons (lambda (g-1_1280 g-0_1281) (let* ((continuations_1282 continuations_1279) (input_1283 g-0_1281) (element_1284 g-1_1280)) (loop-0-166 element_1284 input_1283 continuations_1282))) (cons (car l_1288) '())) input_1277))) (define (parse-1-168 continuations_1291 input_1290) (let* ((continuations_1292 continuations_1291) (input_1293 input_1290)) (if #f 'accept (let* ((continuations_1294 continuations_1292) (input_1295 (cdr input_1293)) (element_1296 (car input_1293))) (loop-0-169 input_1293 continuations_1292 element_1296 input_1295 continuations_1294))))) (define (loop-0-169 fail_1301 fail_1300 element_1299 cont_1298 cont_1297) (let ((element_1302 element_1299)) (if (equal? element_1302 'r) (shift-terminal-0-170 cont_1297 cont_1298) (let* ((element_1389 element_1302) (l_1390 fail_1301) (l_1391 (cdr l_1390)) (input-front_1392 (cons (car l_1390) '()))) 'error)))) (define (shift-terminal-0-170 continuations_1304 input_1303) (let* ((continuations_1305 continuations_1304) (l_1311 continuations_1305) (l_1312 (cdr l_1311)) (l_1313 (cdr l_1312))) (parse-1-171 (cons (lambda (g-3_1306 g-2_1307) (let* ((continuations_1308 continuations_1305) (input_1309 g-2_1307) (element_1310 g-3_1306)) 'you-cannot-see-me)) (cons (car l_1311) (cons (car l_1312) '()))) input_1303))) (define (parse-1-171 continuations_1315 input_1314) (let* ((continuations_1316 continuations_1315) (input_1317 input_1314)) (if #f 'accept (let* ((continuations_1318 continuations_1316) (input_1319 (cdr input_1317)) (element_1320 (car input_1317)) (l_1321 input_1317) (l_1322 (cdr l_1321)) (input-front_1323 (cons (car l_1321) '()))) (loop-0-172 input-front_1323 input_1317 continuations_1316))))) (define (loop-0-172 input-front_1326 cont_1325 cont_1324) (let ((input-front_1327 input-front_1326)) (if (equal? input-front_1327 '(*)) (parse-0-173 cont_1324 cont_1325) (let ((input-front_1336 input-front_1327)) (loop-0-174 input-front_1336 cont_1325 cont_1324))))) (define (loop-0-174 input-front_1339 cont_1338 cont_1337) (let ((input-front_1340 input-front_1339)) (if (equal? input-front_1340 '(+)) (parse-0-175 cont_1337 cont_1338) (let ((input-front_1349 input-front_1340)) (loop-0-176 input-front_1349 cont_1338 cont_1337))))) (define (loop-0-176 input-front_1352 cont_1351 cont_1350) (let ((input-front_1353 input-front_1352)) (if (equal? input-front_1353 '(-)) (parse-0-177 cont_1350 cont_1351) (let ((input-front_1362 input-front_1353)) (loop-0-178 input-front_1362 cont_1351 cont_1350))))) (define (loop-0-178 input-front_1365 cont_1364 cont_1363) (let ((input-front_1366 input-front_1365)) (if (equal? input-front_1366 '(/)) (parse-0-179 cont_1363 cont_1364) (let ((input-front_1375 input-front_1366)) (loop-0-180 input-front_1375 cont_1364 cont_1363))))) (define (loop-0-180 input-front_1378 cont_1377 cont_1376) (let ((input-front_1379 input-front_1378)) (if (equal? input-front_1379 '(r)) (parse-0-181 cont_1376 cont_1377) (let ((input-front_1388 input-front_1379)) 'error)))) (define (parse-0-181 continuations_1381 input_1380) (let ((continuations_1382 continuations_1381)) ((list-ref (cons (lambda (g-5_1383 g-4_1384) (let* ((continuations_1385 continuations_1382) (input_1386 g-4_1384) (element_1387 g-5_1383)) 'you-cannot-see-me)) continuations_1382) 3) 3 input_1380))) (define (parse-0-179 continuations_1368 input_1367) (let ((continuations_1369 continuations_1368)) ((list-ref (cons (lambda (g-5_1370 g-4_1371) (let* ((continuations_1372 continuations_1369) (input_1373 g-4_1371) (element_1374 g-5_1370)) 'you-cannot-see-me)) continuations_1369) 3) 3 input_1367))) (define (parse-0-177 continuations_1355 input_1354) (let ((continuations_1356 continuations_1355)) ((list-ref (cons (lambda (g-5_1357 g-4_1358) (let* ((continuations_1359 continuations_1356) (input_1360 g-4_1358) (element_1361 g-5_1357)) 'you-cannot-see-me)) continuations_1356) 3) 3 input_1354))) (define (parse-0-175 continuations_1342 input_1341) (let ((continuations_1343 continuations_1342)) ((list-ref (cons (lambda (g-5_1344 g-4_1345) (let* ((continuations_1346 continuations_1343) (input_1347 g-4_1345) (element_1348 g-5_1344)) 'you-cannot-see-me)) continuations_1343) 3) 3 input_1341))) (define (parse-0-173 continuations_1329 input_1328) (let ((continuations_1330 continuations_1329)) ((list-ref (cons (lambda (g-5_1331 g-4_1332) (let* ((continuations_1333 continuations_1330) (input_1334 g-4_1332) (element_1335 g-5_1331)) 'you-cannot-see-me)) continuations_1330) 3) 3 input_1328))) (define (shift-terminal-0-138 continuations_1063 input_1062) (let* ((continuations_1064 continuations_1063) (l_1157 continuations_1064)) (parse-1-150 (cons (lambda (g-3_1065 g-2_1066) (let* ((continuations_1067 continuations_1064) (input_1068 g-2_1066) (element_1069 g-3_1065)) (loop-0-139 element_1069 input_1068 continuations_1067))) '()) input_1062))) (define (parse-1-150 continuations_1159 input_1158) (let* ((continuations_1160 continuations_1159) (input_1161 input_1158)) (if #f 'accept (let* ((continuations_1162 continuations_1160) (input_1163 (cdr input_1161)) (element_1164 (car input_1161)) (l_1165 input_1161) (l_1166 (cdr l_1165)) (input-front_1167 (cons (car l_1165) '()))) (loop-0-151 input-front_1167 input_1161 continuations_1160))))) (define (loop-0-151 input-front_1170 cont_1169 cont_1168) (let ((input-front_1171 input-front_1170)) (if (equal? input-front_1171 '(*)) (parse-0-152 cont_1168 cont_1169) (let ((input-front_1180 input-front_1171)) (loop-0-153 input-front_1180 cont_1169 cont_1168))))) (define (loop-0-153 input-front_1183 cont_1182 cont_1181) (let ((input-front_1184 input-front_1183)) (if (equal? input-front_1184 '(+)) (parse-0-154 cont_1181 cont_1182) (let ((input-front_1193 input-front_1184)) (loop-0-155 input-front_1193 cont_1182 cont_1181))))) (define (loop-0-155 input-front_1196 cont_1195 cont_1194) (let ((input-front_1197 input-front_1196)) (if (equal? input-front_1197 '(-)) (parse-0-156 cont_1194 cont_1195) (let ((input-front_1206 input-front_1197)) (loop-0-157 input-front_1206 cont_1195 cont_1194))))) (define (loop-0-157 input-front_1209 cont_1208 cont_1207) (let ((input-front_1210 input-front_1209)) (if (equal? input-front_1210 '(/)) (parse-0-158 cont_1207 cont_1208) (let ((input-front_1219 input-front_1210)) (loop-0-159 input-front_1219 cont_1208 cont_1207))))) (define (loop-0-159 input-front_1222 cont_1221 cont_1220) (let ((input-front_1223 input-front_1222)) (if (equal? input-front_1223 '(r)) (parse-0-160 cont_1220 cont_1221) (let ((input-front_1232 input-front_1223)) 'error)))) (define (parse-0-160 continuations_1225 input_1224) (let ((continuations_1226 continuations_1225)) ((list-ref (cons (lambda (g-5_1227 g-4_1228) (let* ((continuations_1229 continuations_1226) (input_1230 g-4_1228) (element_1231 g-5_1227)) 'you-cannot-see-me)) continuations_1226) 1) 3 input_1224))) (define (parse-0-158 continuations_1212 input_1211) (let ((continuations_1213 continuations_1212)) ((list-ref (cons (lambda (g-5_1214 g-4_1215) (let* ((continuations_1216 continuations_1213) (input_1217 g-4_1215) (element_1218 g-5_1214)) 'you-cannot-see-me)) continuations_1213) 1) 3 input_1211))) (define (parse-0-156 continuations_1199 input_1198) (let ((continuations_1200 continuations_1199)) ((list-ref (cons (lambda (g-5_1201 g-4_1202) (let* ((continuations_1203 continuations_1200) (input_1204 g-4_1202) (element_1205 g-5_1201)) 'you-cannot-see-me)) continuations_1200) 1) 3 input_1198))) (define (parse-0-154 continuations_1186 input_1185) (let ((continuations_1187 continuations_1186)) ((list-ref (cons (lambda (g-5_1188 g-4_1189) (let* ((continuations_1190 continuations_1187) (input_1191 g-4_1189) (element_1192 g-5_1188)) 'you-cannot-see-me)) continuations_1187) 1) 3 input_1185))) (define (parse-0-152 continuations_1173 input_1172) (let ((continuations_1174 continuations_1173)) ((list-ref (cons (lambda (g-5_1175 g-4_1176) (let* ((continuations_1177 continuations_1174) (input_1178 g-4_1176) (element_1179 g-5_1175)) 'you-cannot-see-me)) continuations_1174) 1) 3 input_1172))) (define (loop-0-139 element_1072 cont_1071 cont_1070) (let ((element_1073 element_1072)) (if (equal? element_1073 2) (shift-nonterminal-0-140 cont_1070 cont_1071) (let ((element_1137 element_1073)) (loop-0-148 element_1137 cont_1071 cont_1070))))) (define (loop-0-148 element_1140 cont_1139 cont_1138) (let ((element_1141 element_1140)) (if (equal? element_1141 3) (shift-nonterminal-0-149 cont_1138 cont_1139) (let ((element_1156 element_1141)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-149 continuations_1143 input_1142) (let* ((continuations_1144 continuations_1143) (l_1153 continuations_1144)) (parse-1-131 (cons (lambda (g-1_1145 g-0_1146) (let* ((continuations_1147 continuations_1144) (input_1148 g-0_1146) (element_1149 g-1_1145)) (loop-0-139 element_1149 input_1148 continuations_1147))) '()) input_1142))) (define (shift-nonterminal-0-140 continuations_1075 input_1074) (let* ((continuations_1076 continuations_1075) (l_1085 continuations_1076) (l_1086 (cdr l_1085)) (l_1087 (cdr l_1086))) (parse-1-141 (cons (lambda (g-1_1077 g-0_1078) (let* ((continuations_1079 continuations_1076) (input_1080 g-0_1078) (element_1081 g-1_1077)) (loop-0-139 element_1081 input_1080 continuations_1079))) (cons (car l_1085) (cons (car l_1086) '()))) input_1074))) (define (parse-1-141 continuations_1089 input_1088) (let* ((continuations_1090 continuations_1089) (input_1091 input_1088)) (if #f 'accept (let* ((continuations_1092 continuations_1090) (input_1093 (cdr input_1091)) (element_1094 (car input_1091)) (l_1095 input_1091) (l_1096 (cdr l_1095)) (input-front_1097 (cons (car l_1095) '()))) (loop-0-142 input-front_1097 input_1091 continuations_1090))))) (define (loop-0-142 input-front_1100 cont_1099 cont_1098) (let ((input-front_1101 input-front_1100)) (if (equal? input-front_1101 '(+)) (parse-0-143 cont_1098 cont_1099) (let ((input-front_1110 input-front_1101)) (loop-0-144 input-front_1110 cont_1099 cont_1098))))) (define (loop-0-144 input-front_1113 cont_1112 cont_1111) (let ((input-front_1114 input-front_1113)) (if (equal? input-front_1114 '(-)) (parse-0-145 cont_1111 cont_1112) (let ((input-front_1123 input-front_1114)) (loop-0-146 input-front_1123 cont_1112 cont_1111))))) (define (loop-0-146 input-front_1126 cont_1125 cont_1124) (let ((input-front_1127 input-front_1126)) (if (equal? input-front_1127 '(r)) (parse-0-147 cont_1124 cont_1125) (let ((input-front_1136 input-front_1127)) 'error)))) (define (parse-0-147 continuations_1129 input_1128) (let ((continuations_1130 continuations_1129)) ((list-ref (cons (lambda (g-5_1131 g-4_1132) (let* ((continuations_1133 continuations_1130) (input_1134 g-4_1132) (element_1135 g-5_1131)) 'you-cannot-see-me)) continuations_1130) 3) 2 input_1128))) (define (parse-0-145 continuations_1116 input_1115) (let ((continuations_1117 continuations_1116)) ((list-ref (cons (lambda (g-5_1118 g-4_1119) (let* ((continuations_1120 continuations_1117) (input_1121 g-4_1119) (element_1122 g-5_1118)) 'you-cannot-see-me)) continuations_1117) 3) 2 input_1115))) (define (parse-0-143 continuations_1103 input_1102) (let ((continuations_1104 continuations_1103)) ((list-ref (cons (lambda (g-5_1105 g-4_1106) (let* ((continuations_1107 continuations_1104) (input_1108 g-4_1106) (element_1109 g-5_1105)) 'you-cannot-see-me)) continuations_1104) 3) 2 input_1102))) (define (shift-terminal-0-133 continuations_1021 input_1020) (let* ((continuations_1022 continuations_1021) (l_1028 continuations_1022) (l_1029 (cdr l_1028))) (parse-1-117 (cons (lambda (g-3_1023 g-2_1024) (let* ((continuations_1025 continuations_1022) (input_1026 g-2_1024) (element_1027 g-3_1023)) 'you-cannot-see-me)) (cons (car l_1028) '())) input_1020))) (define (shift-nonterminal-0-121 continuations_928 input_927) (let* ((continuations_929 continuations_928) (l_938 continuations_929) (l_939 (cdr l_938)) (l_940 (cdr l_939))) (parse-1-122 (cons (lambda (g-1_930 g-0_931) (let* ((continuations_932 continuations_929) (input_933 g-0_931) (element_934 g-1_930)) (loop-0-120 element_934 input_933 continuations_932))) (cons (car l_938) (cons (car l_939) '()))) input_927))) (define (parse-1-122 continuations_942 input_941) (let* ((continuations_943 continuations_942) (input_944 input_941)) (if #f 'accept (let* ((continuations_945 continuations_943) (input_946 (cdr input_944)) (element_947 (car input_944)) (l_948 input_944) (l_949 (cdr l_948)) (input-front_950 (cons (car l_948) '()))) (loop-0-123 input-front_950 input_944 continuations_943))))) (define (loop-0-123 input-front_953 cont_952 cont_951) (let ((input-front_954 input-front_953)) (if (equal? input-front_954 '(+)) (parse-0-124 cont_951 cont_952) (let ((input-front_963 input-front_954)) (loop-0-125 input-front_963 cont_952 cont_951))))) (define (loop-0-125 input-front_966 cont_965 cont_964) (let ((input-front_967 input-front_966)) (if (equal? input-front_967 '(-)) (parse-0-126 cont_964 cont_965) (let ((input-front_976 input-front_967)) (loop-0-127 input-front_976 cont_965 cont_964))))) (define (loop-0-127 input-front_979 cont_978 cont_977) (let ((input-front_980 input-front_979)) (if (equal? input-front_980 '(r)) (parse-0-128 cont_977 cont_978) (let ((input-front_989 input-front_980)) 'error)))) (define (parse-0-128 continuations_982 input_981) (let ((continuations_983 continuations_982)) ((list-ref (cons (lambda (g-5_984 g-4_985) (let* ((continuations_986 continuations_983) (input_987 g-4_985) (element_988 g-5_984)) 'you-cannot-see-me)) continuations_983) 3) 2 input_981))) (define (parse-0-126 continuations_969 input_968) (let ((continuations_970 continuations_969)) ((list-ref (cons (lambda (g-5_971 g-4_972) (let* ((continuations_973 continuations_970) (input_974 g-4_972) (element_975 g-5_971)) 'you-cannot-see-me)) continuations_970) 3) 2 input_968))) (define (parse-0-124 continuations_956 input_955) (let ((continuations_957 continuations_956)) ((list-ref (cons (lambda (g-5_958 g-4_959) (let* ((continuations_960 continuations_957) (input_961 g-4_959) (element_962 g-5_958)) 'you-cannot-see-me)) continuations_957) 3) 2 input_955))) (define (shift-nonterminal-0-111 continuations_849 input_848) (let* ((continuations_850 continuations_849) (l_859 continuations_850)) (parse-1-99 (cons (lambda (g-1_851 g-0_852) (let* ((continuations_853 continuations_850) (input_854 g-0_852) (element_855 g-1_851)) (loop-0-105 element_855 input_854 continuations_853))) '()) input_848))) (define (shift-nonterminal-0-106 continuations_807 input_806) (let* ((continuations_808 continuations_807) (l_817 continuations_808) (l_818 (cdr l_817)) (l_819 (cdr l_818))) (parse-1-107 (cons (lambda (g-1_809 g-0_810) (let* ((continuations_811 continuations_808) (input_812 g-0_810) (element_813 g-1_809)) (loop-0-105 element_813 input_812 continuations_811))) (cons (car l_817) (cons (car l_818) '()))) input_806))) (define (parse-1-107 continuations_821 input_820) (let* ((continuations_822 continuations_821) (input_823 input_820)) (if #f 'accept (let* ((continuations_824 continuations_822) (input_825 (cdr input_823)) (element_826 (car input_823)) (l_827 input_823) (l_828 (cdr l_827)) (input-front_829 (cons (car l_827) '()))) (loop-0-108 input-front_829 input_823 continuations_822))))) (define (loop-0-108 input-front_832 cont_831 cont_830) (let ((input-front_833 input-front_832)) (if (equal? input-front_833 '(r)) (parse-0-109 cont_830 cont_831) (let ((input-front_842 input-front_833)) 'error)))) (define (parse-0-109 continuations_835 input_834) (let ((continuations_836 continuations_835)) ((list-ref (cons (lambda (g-5_837 g-4_838) (let* ((continuations_839 continuations_836) (input_840 g-4_838) (element_841 g-5_837)) 'you-cannot-see-me)) continuations_836) 3) 1 input_834))) (define (shift-nonterminal-0-82 continuations_626 input_625) (let* ((continuations_627 continuations_626) (l_636 continuations_627) (l_637 (cdr l_636))) (parse-1-83 (cons (lambda (g-1_628 g-0_629) (let* ((continuations_630 continuations_627) (input_631 g-0_629) (element_632 g-1_628)) (loop-0-81 element_632 input_631 continuations_630))) (cons (car l_636) '())) input_625))) (define (parse-1-83 continuations_639 input_638) (let* ((continuations_640 continuations_639) (input_641 input_638)) (if #f 'accept (let* ((continuations_642 continuations_640) (input_643 (cdr input_641)) (element_644 (car input_641))) (loop-0-84 input_641 continuations_640 element_644 input_643 continuations_642))))) (define (loop-0-84 fail_649 fail_648 element_647 cont_646 cont_645) (let ((element_650 element_647)) (if (equal? element_650 'r) (shift-terminal-0-85 cont_645 cont_646) (let* ((element_737 element_650) (l_738 fail_649) (l_739 (cdr l_738)) (input-front_740 (cons (car l_738) '()))) 'error)))) (define (shift-terminal-0-85 continuations_652 input_651) (let* ((continuations_653 continuations_652) (l_659 continuations_653) (l_660 (cdr l_659)) (l_661 (cdr l_660))) (parse-1-86 (cons (lambda (g-3_654 g-2_655) (let* ((continuations_656 continuations_653) (input_657 g-2_655) (element_658 g-3_654)) 'you-cannot-see-me)) (cons (car l_659) (cons (car l_660) '()))) input_651))) (define (parse-1-86 continuations_663 input_662) (let* ((continuations_664 continuations_663) (input_665 input_662)) (if #f 'accept (let* ((continuations_666 continuations_664) (input_667 (cdr input_665)) (element_668 (car input_665)) (l_669 input_665) (l_670 (cdr l_669)) (input-front_671 (cons (car l_669) '()))) (loop-0-87 input-front_671 input_665 continuations_664))))) (define (loop-0-87 input-front_674 cont_673 cont_672) (let ((input-front_675 input-front_674)) (if (equal? input-front_675 '($)) (parse-0-88 cont_672 cont_673) (let ((input-front_684 input-front_675)) (loop-0-89 input-front_684 cont_673 cont_672))))) (define (loop-0-89 input-front_687 cont_686 cont_685) (let ((input-front_688 input-front_687)) (if (equal? input-front_688 '(*)) (parse-0-90 cont_685 cont_686) (let ((input-front_697 input-front_688)) (loop-0-91 input-front_697 cont_686 cont_685))))) (define (loop-0-91 input-front_700 cont_699 cont_698) (let ((input-front_701 input-front_700)) (if (equal? input-front_701 '(+)) (parse-0-92 cont_698 cont_699) (let ((input-front_710 input-front_701)) (loop-0-93 input-front_710 cont_699 cont_698))))) (define (loop-0-93 input-front_713 cont_712 cont_711) (let ((input-front_714 input-front_713)) (if (equal? input-front_714 '(-)) (parse-0-94 cont_711 cont_712) (let ((input-front_723 input-front_714)) (loop-0-95 input-front_723 cont_712 cont_711))))) (define (loop-0-95 input-front_726 cont_725 cont_724) (let ((input-front_727 input-front_726)) (if (equal? input-front_727 '(/)) (parse-0-96 cont_724 cont_725) (let ((input-front_736 input-front_727)) 'error)))) (define (parse-0-96 continuations_729 input_728) (let ((continuations_730 continuations_729)) ((list-ref (cons (lambda (g-5_731 g-4_732) (let* ((continuations_733 continuations_730) (input_734 g-4_732) (element_735 g-5_731)) 'you-cannot-see-me)) continuations_730) 3) 3 input_728))) (define (parse-0-94 continuations_716 input_715) (let ((continuations_717 continuations_716)) ((list-ref (cons (lambda (g-5_718 g-4_719) (let* ((continuations_720 continuations_717) (input_721 g-4_719) (element_722 g-5_718)) 'you-cannot-see-me)) continuations_717) 3) 3 input_715))) (define (parse-0-92 continuations_703 input_702) (let ((continuations_704 continuations_703)) ((list-ref (cons (lambda (g-5_705 g-4_706) (let* ((continuations_707 continuations_704) (input_708 g-4_706) (element_709 g-5_705)) 'you-cannot-see-me)) continuations_704) 3) 3 input_702))) (define (parse-0-90 continuations_690 input_689) (let ((continuations_691 continuations_690)) ((list-ref (cons (lambda (g-5_692 g-4_693) (let* ((continuations_694 continuations_691) (input_695 g-4_693) (element_696 g-5_692)) 'you-cannot-see-me)) continuations_691) 3) 3 input_689))) (define (parse-0-88 continuations_677 input_676) (let ((continuations_678 continuations_677)) ((list-ref (cons (lambda (g-5_679 g-4_680) (let* ((continuations_681 continuations_678) (input_682 g-4_680) (element_683 g-5_679)) 'you-cannot-see-me)) continuations_678) 3) 3 input_676))) (define (shift-terminal-0-53 continuations_411 input_410) (let* ((continuations_412 continuations_411) (l_505 continuations_412)) (parse-1-65 (cons (lambda (g-3_413 g-2_414) (let* ((continuations_415 continuations_412) (input_416 g-2_414) (element_417 g-3_413)) (loop-0-54 element_417 input_416 continuations_415))) '()) input_410))) (define (parse-1-65 continuations_507 input_506) (let* ((continuations_508 continuations_507) (input_509 input_506)) (if #f 'accept (let* ((continuations_510 continuations_508) (input_511 (cdr input_509)) (element_512 (car input_509)) (l_513 input_509) (l_514 (cdr l_513)) (input-front_515 (cons (car l_513) '()))) (loop-0-66 input-front_515 input_509 continuations_508))))) (define (loop-0-66 input-front_518 cont_517 cont_516) (let ((input-front_519 input-front_518)) (if (equal? input-front_519 '($)) (parse-0-67 cont_516 cont_517) (let ((input-front_528 input-front_519)) (loop-0-68 input-front_528 cont_517 cont_516))))) (define (loop-0-68 input-front_531 cont_530 cont_529) (let ((input-front_532 input-front_531)) (if (equal? input-front_532 '(*)) (parse-0-69 cont_529 cont_530) (let ((input-front_541 input-front_532)) (loop-0-70 input-front_541 cont_530 cont_529))))) (define (loop-0-70 input-front_544 cont_543 cont_542) (let ((input-front_545 input-front_544)) (if (equal? input-front_545 '(+)) (parse-0-71 cont_542 cont_543) (let ((input-front_554 input-front_545)) (loop-0-72 input-front_554 cont_543 cont_542))))) (define (loop-0-72 input-front_557 cont_556 cont_555) (let ((input-front_558 input-front_557)) (if (equal? input-front_558 '(-)) (parse-0-73 cont_555 cont_556) (let ((input-front_567 input-front_558)) (loop-0-74 input-front_567 cont_556 cont_555))))) (define (loop-0-74 input-front_570 cont_569 cont_568) (let ((input-front_571 input-front_570)) (if (equal? input-front_571 '(/)) (parse-0-75 cont_568 cont_569) (let ((input-front_580 input-front_571)) 'error)))) (define (parse-0-75 continuations_573 input_572) (let ((continuations_574 continuations_573)) ((list-ref (cons (lambda (g-5_575 g-4_576) (let* ((continuations_577 continuations_574) (input_578 g-4_576) (element_579 g-5_575)) 'you-cannot-see-me)) continuations_574) 1) 3 input_572))) (define (parse-0-73 continuations_560 input_559) (let ((continuations_561 continuations_560)) ((list-ref (cons (lambda (g-5_562 g-4_563) (let* ((continuations_564 continuations_561) (input_565 g-4_563) (element_566 g-5_562)) 'you-cannot-see-me)) continuations_561) 1) 3 input_559))) (define (parse-0-71 continuations_547 input_546) (let ((continuations_548 continuations_547)) ((list-ref (cons (lambda (g-5_549 g-4_550) (let* ((continuations_551 continuations_548) (input_552 g-4_550) (element_553 g-5_549)) 'you-cannot-see-me)) continuations_548) 1) 3 input_546))) (define (parse-0-69 continuations_534 input_533) (let ((continuations_535 continuations_534)) ((list-ref (cons (lambda (g-5_536 g-4_537) (let* ((continuations_538 continuations_535) (input_539 g-4_537) (element_540 g-5_536)) 'you-cannot-see-me)) continuations_535) 1) 3 input_533))) (define (parse-0-67 continuations_521 input_520) (let ((continuations_522 continuations_521)) ((list-ref (cons (lambda (g-5_523 g-4_524) (let* ((continuations_525 continuations_522) (input_526 g-4_524) (element_527 g-5_523)) 'you-cannot-see-me)) continuations_522) 1) 3 input_520))) (define (loop-0-54 element_420 cont_419 cont_418) (let ((element_421 element_420)) (if (equal? element_421 2) (shift-nonterminal-0-55 cont_418 cont_419) (let ((element_485 element_421)) (loop-0-63 element_485 cont_419 cont_418))))) (define (loop-0-63 element_488 cont_487 cont_486) (let ((element_489 element_488)) (if (equal? element_489 3) (shift-nonterminal-0-64 cont_486 cont_487) (let ((element_504 element_489)) 'you-cannot-see-me)))) (define (shift-nonterminal-0-64 continuations_491 input_490) (let* ((continuations_492 continuations_491) (l_501 continuations_492)) (parse-1-46 (cons (lambda (g-1_493 g-0_494) (let* ((continuations_495 continuations_492) (input_496 g-0_494) (element_497 g-1_493)) (loop-0-54 element_497 input_496 continuations_495))) '()) input_490))) (define (shift-nonterminal-0-55 continuations_423 input_422) (let* ((continuations_424 continuations_423) (l_433 continuations_424) (l_434 (cdr l_433)) (l_435 (cdr l_434))) (parse-1-56 (cons (lambda (g-1_425 g-0_426) (let* ((continuations_427 continuations_424) (input_428 g-0_426) (element_429 g-1_425)) (loop-0-54 element_429 input_428 continuations_427))) (cons (car l_433) (cons (car l_434) '()))) input_422))) (define (parse-1-56 continuations_437 input_436) (let* ((continuations_438 continuations_437) (input_439 input_436)) (if #f 'accept (let* ((continuations_440 continuations_438) (input_441 (cdr input_439)) (element_442 (car input_439)) (l_443 input_439) (l_444 (cdr l_443)) (input-front_445 (cons (car l_443) '()))) (loop-0-57 input-front_445 input_439 continuations_438))))) (define (loop-0-57 input-front_448 cont_447 cont_446) (let ((input-front_449 input-front_448)) (if (equal? input-front_449 '($)) (parse-0-58 cont_446 cont_447) (let ((input-front_458 input-front_449)) (loop-0-59 input-front_458 cont_447 cont_446))))) (define (loop-0-59 input-front_461 cont_460 cont_459) (let ((input-front_462 input-front_461)) (if (equal? input-front_462 '(+)) (parse-0-60 cont_459 cont_460) (let ((input-front_471 input-front_462)) (loop-0-61 input-front_471 cont_460 cont_459))))) (define (loop-0-61 input-front_474 cont_473 cont_472) (let ((input-front_475 input-front_474)) (if (equal? input-front_475 '(-)) (parse-0-62 cont_472 cont_473) (let ((input-front_484 input-front_475)) 'error)))) (define (parse-0-62 continuations_477 input_476) (let ((continuations_478 continuations_477)) ((list-ref (cons (lambda (g-5_479 g-4_480) (let* ((continuations_481 continuations_478) (input_482 g-4_480) (element_483 g-5_479)) 'you-cannot-see-me)) continuations_478) 3) 2 input_476))) (define (parse-0-60 continuations_464 input_463) (let ((continuations_465 continuations_464)) ((list-ref (cons (lambda (g-5_466 g-4_467) (let* ((continuations_468 continuations_465) (input_469 g-4_467) (element_470 g-5_466)) 'you-cannot-see-me)) continuations_465) 3) 2 input_463))) (define (parse-0-58 continuations_451 input_450) (let ((continuations_452 continuations_451)) ((list-ref (cons (lambda (g-5_453 g-4_454) (let* ((continuations_455 continuations_452) (input_456 g-4_454) (element_457 g-5_453)) 'you-cannot-see-me)) continuations_452) 3) 2 input_450))) (define (shift-terminal-0-48 continuations_369 input_368) (let* ((continuations_370 continuations_369) (l_376 continuations_370) (l_377 (cdr l_376))) (parse-1-32 (cons (lambda (g-3_371 g-2_372) (let* ((continuations_373 continuations_370) (input_374 g-2_372) (element_375 g-3_371)) 'you-cannot-see-me)) (cons (car l_376) '())) input_368))) (define (shift-nonterminal-0-36 continuations_276 input_275) (let* ((continuations_277 continuations_276) (l_286 continuations_277) (l_287 (cdr l_286)) (l_288 (cdr l_287))) (parse-1-37 (cons (lambda (g-1_278 g-0_279) (let* ((continuations_280 continuations_277) (input_281 g-0_279) (element_282 g-1_278)) (loop-0-35 element_282 input_281 continuations_280))) (cons (car l_286) (cons (car l_287) '()))) input_275))) (define (parse-1-37 continuations_290 input_289) (let* ((continuations_291 continuations_290) (input_292 input_289)) (if #f 'accept (let* ((continuations_293 continuations_291) (input_294 (cdr input_292)) (element_295 (car input_292)) (l_296 input_292) (l_297 (cdr l_296)) (input-front_298 (cons (car l_296) '()))) (loop-0-38 input-front_298 input_292 continuations_291))))) (define (loop-0-38 input-front_301 cont_300 cont_299) (let ((input-front_302 input-front_301)) (if (equal? input-front_302 '($)) (parse-0-39 cont_299 cont_300) (let ((input-front_311 input-front_302)) (loop-0-40 input-front_311 cont_300 cont_299))))) (define (loop-0-40 input-front_314 cont_313 cont_312) (let ((input-front_315 input-front_314)) (if (equal? input-front_315 '(+)) (parse-0-41 cont_312 cont_313) (let ((input-front_324 input-front_315)) (loop-0-42 input-front_324 cont_313 cont_312))))) (define (loop-0-42 input-front_327 cont_326 cont_325) (let ((input-front_328 input-front_327)) (if (equal? input-front_328 '(-)) (parse-0-43 cont_325 cont_326) (let ((input-front_337 input-front_328)) 'error)))) (define (parse-0-43 continuations_330 input_329) (let ((continuations_331 continuations_330)) ((list-ref (cons (lambda (g-5_332 g-4_333) (let* ((continuations_334 continuations_331) (input_335 g-4_333) (element_336 g-5_332)) 'you-cannot-see-me)) continuations_331) 3) 2 input_329))) (define (parse-0-41 continuations_317 input_316) (let ((continuations_318 continuations_317)) ((list-ref (cons (lambda (g-5_319 g-4_320) (let* ((continuations_321 continuations_318) (input_322 g-4_320) (element_323 g-5_319)) 'you-cannot-see-me)) continuations_318) 3) 2 input_316))) (define (parse-0-39 continuations_304 input_303) (let ((continuations_305 continuations_304)) ((list-ref (cons (lambda (g-5_306 g-4_307) (let* ((continuations_308 continuations_305) (input_309 g-4_307) (element_310 g-5_306)) 'you-cannot-see-me)) continuations_305) 3) 2 input_303))) (define (shift-nonterminal-0-26 continuations_197 input_196) (let* ((continuations_198 continuations_197) (l_207 continuations_198)) (parse-1-14 (cons (lambda (g-1_199 g-0_200) (let* ((continuations_201 continuations_198) (input_202 g-0_200) (element_203 g-1_199)) (loop-0-20 element_203 input_202 continuations_201))) '()) input_196))) (define (shift-nonterminal-0-21 continuations_155 input_154) (let* ((continuations_156 continuations_155) (l_165 continuations_156) (l_166 (cdr l_165)) (l_167 (cdr l_166))) (parse-1-22 (cons (lambda (g-1_157 g-0_158) (let* ((continuations_159 continuations_156) (input_160 g-0_158) (element_161 g-1_157)) (loop-0-20 element_161 input_160 continuations_159))) (cons (car l_165) (cons (car l_166) '()))) input_154))) (define (parse-1-22 continuations_169 input_168) (let* ((continuations_170 continuations_169) (input_171 input_168)) (if #f 'accept (let* ((continuations_172 continuations_170) (input_173 (cdr input_171)) (element_174 (car input_171)) (l_175 input_171) (l_176 (cdr l_175)) (input-front_177 (cons (car l_175) '()))) (loop-0-23 input-front_177 input_171 continuations_170))))) (define (loop-0-23 input-front_180 cont_179 cont_178) (let ((input-front_181 input-front_180)) (if (equal? input-front_181 '($)) (parse-0-24 cont_178 cont_179) (let ((input-front_190 input-front_181)) 'error)))) (define (parse-0-24 continuations_183 input_182) (let ((continuations_184 continuations_183)) ((list-ref (cons (lambda (g-5_185 g-4_186) (let* ((continuations_187 continuations_184) (input_188 g-4_186) (element_189 g-5_185)) 'you-cannot-see-me)) continuations_184) 3) 1 input_182))) (define (shift-nonterminal-0-5 continuations_28 input_27) (let* ((continuations_29 continuations_28) (l_38 continuations_29)) (parse-1-6 (cons (lambda (g-1_30 g-0_31) (let* ((continuations_32 continuations_29) (input_33 g-0_31) (element_34 g-1_30)) (loop-0-4 element_34 input_33 continuations_32))) '()) input_27))) (define (parse-1-6 continuations_40 input_39) (let* ((continuations_41 continuations_40) (input_42 input_39)) (if (equal? '$ (car input_42)) 'accept (let* ((continuations_43 continuations_41) (input_44 (cdr input_42)) (element_45 (car input_42))) (loop-0-7 input_42 continuations_41 element_45 input_44 continuations_43))))) (define (loop-0-7 fail_50 fail_49 element_48 cont_47 cont_46) (let ((element_51 element_48)) (if (equal? element_51 '$) (shift-terminal-0-8 cont_46 cont_47) (let* ((element_85 element_51) (l_86 fail_50) (l_87 (cdr l_86)) (input-front_88 (cons (car l_86) '()))) 'error)))) (define (shift-terminal-0-8 continuations_53 input_52) (let* ((continuations_54 continuations_53) (l_60 continuations_54) (l_61 (cdr l_60))) (parse-1-9 (cons (lambda (g-3_55 g-2_56) (let* ((continuations_57 continuations_54) (input_58 g-2_56) (element_59 g-3_55)) 'you-cannot-see-me)) (cons (car l_60) '())) input_52))) (define (parse-1-9 continuations_63 input_62) (let* ((continuations_64 continuations_63) (input_65 input_62)) (if #f 'accept (let* ((continuations_66 continuations_64) (input_67 (cdr input_65)) (element_68 (car input_65)) (l_69 input_65) (l_70 (cdr l_69)) (input-front_71 (cons (car l_69) '()))) (loop-0-10 input-front_71 input_65 continuations_64))))) (define (loop-0-10 input-front_74 cont_73 cont_72) (let ((input-front_75 input-front_74)) (if (equal? input-front_75 '($)) (parse-0-11 cont_72 cont_73) (let ((input-front_84 input-front_75)) 'error)))) (define (parse-0-11 continuations_77 input_76) (let ((continuations_78 continuations_77)) ((list-ref (cons (lambda (g-5_79 g-4_80) (let* ((continuations_81 continuations_78) (input_82 g-4_80) (element_83 g-5_79)) 'you-cannot-see-me)) continuations_78) 2) 0 input_76))) (parse-1-1 '() (append input_1 '($)))))
> Before: 829531 words free in semispace
After:  942007 words free in semispace
> specializing (timing)
Run time: 10.81 seconds; Elapsed time: 10.81 seconds
#t
> (^^^compilation time * 1)> 
> > !!!specializing> 
> Before: 541703 words free in semispace
After:  942106 words free in semispace
> specializing (timing)
Run time: 9.87 seconds; Elapsed time: 9.91 seconds
#f
> (^^^specialization time * 1)> 
> > > 