,open escapes signals
,load cogen-load.scm

(define repetitions 100)
(define ntimes
  (lambda (thunk n)
    (let loop ((i n))
      (if (> i 0)
	  (begin
	    (thunk)
	    (loop (- i 1)))))))

(set! *bta-display-level* 0)		;quiet, please

(define (cleanup!)
  (set! *residual-program* '())
  (set! *memolist* '())
  (set! *generating-extension* '()))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "----------------------------------------------------------------------") (newline)
(display "PGG (app) :") (newline)

,time (ntimes (lambda() (cogen-driver '("examples/app.scm") '(app 0 1)) #f) repetitions)
(display (list "^^^ preprocessing time *" repetitions)) (newline)

(display "!!!generating compiler") (newline)
(define *residual-program* (cogen-driver '("examples/app.scm") '(app 0 1)))
(load-program *residual-program*)
,time (ntimes (lambda () (start-memo 2 $goal '(1 2) (list  'XXX 'YYY))) repetitions)
(display (list "^^^ generation time *" repetitions)) (newline)

(display "!!!compiling") (newline)
(define level1 (start-memo 2 $goal '(1 2) (list  'XXX 'YYY)))
(load-program *residual-program*)
,time (ntimes (lambda () (nextlevel level1 (list  '(a b c) 'YYY))) repetitions)
(display (list "^^^ specialization time *" repetitions)) (newline)

;;;
,undefine $goal-1

(cleanup!)
,collect

;;; second run 
(display "----------------------------------------------------------------------") (newline)
(display "PGG (ctors) :") (newline)

,time (ntimes (lambda() (cogen-driver '("examples/ctors.scm") '(main 0 1)) #f) repetitions)
(display (list "^^^ preprocessing time *" repetitions)) (newline)

(display "!!!generating compiler") (newline)
(define *residual-program* (cogen-driver '("examples/ctors.scm") '(main 0 1)))
(load-program *residual-program*)
,time (ntimes (lambda () (start-memo 2 $goal '(1 2) (list  'XXX 'YYY))) repetitions)
(display (list "^^^ generation time *" repetitions)) (newline)

(display "!!!compiling") (newline)
(define level1 (start-memo 2 $goal '(1 2) (list  'XXX 'YYY)))
(load-program *residual-program*)
,time (ntimes (lambda () (nextlevel level1 (list  '(a b c) 'YYY))) repetitions)
(display (list "^^^ specialization time *" repetitions)) (newline)

;;;
,undefine $goal-1

(cleanup!)
,collect

;;; third run
(display "----------------------------------------------------------------------") (newline)
(display "PGG (lambda) :") (newline)

,time (ntimes (lambda() (cogen-driver '("examples/lambda.scm") '(main 0 1)) #f) repetitions)
(display (list "^^^ preprocessing *" repetitions)) (newline)

(display "!!!generating compiler") (newline)
(define *residual-program* (cogen-driver '("examples/lambda.scm") '(main 0 1)))
(load-program *residual-program*)
,time (ntimes (lambda () (start-memo 2 $goal '(1 2) (list  'XXX 'YYY))) repetitions)
(display (list "^^^ generation time *" repetitions)) (newline)

(display "!!!compiling") (newline)
(define level1 (start-memo 2 $goal '(1 2) (list  'XXX 'YYY)))
(load-program *residual-program*)
,time (ntimes (lambda () (nextlevel level1 (list 42 'YYY))) repetitions)
(display (list "^^^ specialization time *" repetitions)) (newline)

;;;
,undefine $goal-1

(cleanup!)
,collect

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "----------------------------------------------------------------------") (newline)
(display "PGG (direct-lr) :") (newline)
(set! repetitions 1)

,time (ntimes (lambda() (cogen-driver '("examples/direct-lr-pgg.scm") '(direct-parse-main 0 0 1)) #f) repetitions)
(display (list "^^^ preprocessing *" repetitions)) (newline)

(display "!!!generating compiler") (newline)
(define *residual-program* (cogen-driver '("examples/direct-lr-pgg.scm") '(direct-parse-main 0 0 1)))
(load-program *residual-program*)
,time (ntimes (lambda () (start-memo 2 $goal '(1 1 2) (list  'XXX 'YYY 'ZZZ))) repetitions)
(display (list "^^^ generation time *" repetitions)) (newline)

(load "examples/direct-lr-support.scm")
(load "../lr-essence/examples/grammars.scm")
(display "!!!compiling") (newline)
(define level1 (start-memo 2 $goal '(1 1 2) (list 'UUU  'XXX 'YYY)))
(load-program *residual-program*)
,time (ntimes (lambda () (nextlevel level1 (list g10-attrib 1 'input))) repetitions)
(display (list "^^^ specialization time *" repetitions)) (newline)

;;;
,undefine $goal-1

(cleanup!)
,collect

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "----------------------------------------------------------------------") (newline)
(display "PGG (cps-lr) :") (newline)

,time (begin (cogen-driver '("examples/cps-lr.scm") '(do-parse 0 0 1)) #t)
(display (list "^^^ preprocessing time * 1")) (newline)
(define *residual-program* (cogen-driver '("examples/cps-lr.scm") '(do-parse 0 0 1)))
(load-program *residual-program*)

,time (begin (start-memo 2 $goal '(1 1 2) (list 'grammar 'k 'input)) #t)
(display "^^^ generation time * 1") (newline)
(define level1 (start-memo 2 $goal '(1 1 2) (list 'grammar 'k 'input)))
(load-program *residual-program*)

(load "examples/direct-lr-support.scm")
(load "../lr-essence/examples/grammars.scm")
,time (begin (nextlevel level1 (list g10-attrib 1 'input)) #t)
(display (list "^^^ specialization time * 1")) (newline)
;;; (define level2 (nextlevel level1 (list g10-attrib 1 'input)))

;;;
,undefine $goal-1

(cleanup!)
,collect

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "----------------------------------------------------------------------") (newline)
(display "PGG (cps-lr, 3 levels) :") (newline)

,time (begin (cogen-driver '("examples/cps-lr.scm") '(do-parse 1 1 2)) #t)
(display (list "^^^ preprocessing time * 1")) (newline)
(define *residual-program* (cogen-driver '("examples/cps-lr.scm") '(do-parse 1 1 2)))
(load-program *residual-program*)

,time (begin (start-memo 3 $goal '(2 2 3) (list 'grammar 'k 'input)) #t)
(display (list "^^^ generation time * 1")) (newline)
(define level1 (start-memo 3 $goal '(2 2 3) (list 'grammar 'k 'input)))
(load-program *residual-program*)

,time (begin (nextlevel level1 (list 'grammar 'k 'input)) #t)
(display (list "^^^ specialization time 1 * 1")) (newline)
(define level2 (nextlevel level1 (list 'grammar 'k 'input)))
(load-program *residual-program*)

(load "examples/direct-lr-support.scm")
(load "../lr-essence/examples/grammars.scm")
,time (begin (nextlevel level2 (list g10-attrib 1 'input)) #t)
(display (list "^^^ specialization time 2 * 1")) (newline)
;;; (define level3 (nextlevel level2 (list g10-attrib 1 'input)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
,exit
