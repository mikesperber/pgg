Welcome to Scheme 48 0.39 (Similix 5.1).
Copyright (c) 1993, 1994 by Richard Kelsey and Jonathan Rees.
Please report bugs to scheme-48-bugs@martigny.ai.mit.edu.
Type ,? (comma question-mark) for help.
> > cogen-load.scm 
loading compiler generator
auxiliary.scm 
cogen-abssyn.scm 
cogen-scheme.scm 
cogen-skeleton.scm 
cogen-bta.scm 
cogen-ctors.scm 
cogen-library.scm 
shift-reset.scm 
cogen-direct.scm 
cogen-driver.scm 

> > > > > Similix (app) :> 
> > !!!preprocessing> 
> front-end _simtmp0.scm 
flow bt sp eod oc rl 
'done
> front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
Run time: 54.51 seconds
'done
> !!!generating compiler> 
> generating compiler (timing)
_simtmp0.scm 
'()
> generating compiler (timing)
Run time: 160.15 seconds
'()
> !!!compiling> 
> loading current compiler
_simtmp0.scm _simtmp1.scm 

specializing
'((define (app-0 y_0) (cons 'a (cons 'b (cons 'c y_0)))))
> specializing (timing)
Run time: 5.78 seconds
'((define (app-0 y_0) (cons 'a (cons 'b (cons 'c y_0)))))
> !!!specializing> 
> specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
Run time: 11.12 seconds
#f
> > > ----------------------------------------------------------------------> 
> Similix (ctors) :> 
> > !!!preprocessing> 
> front-end _simtmp0.scm 
flow bt sp eod oc rl 
'done
> front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
Run time: 115.65 seconds
'done
> !!!generating compiler> 
> generating compiler (timing)
'()
> generating compiler (timing)
Run time: 487.09 seconds
'()
> !!!compiling> 
> loading current compiler
_simtmp0.scm _simtmp1.scm 
_simtmp1.scm 

specializing
'((loadt "examples/ctors.adt") (define (main-0 dd_0) (car dd_0) (let ((dd_2 (cdr dd_0))) (car dd_2) (let ((dd_4 (cdr dd_2))) (car dd_4) (cdr dd_4) 3))))
> specializing (timing)
Run time: 20.21 seconds
'((loadt "examples/ctors.adt") (define (main-0 dd_0) (car dd_0) (let ((dd_2 (cdr dd_0))) (car dd_2) (let ((dd_4 (cdr dd_2))) (car dd_4) (cdr dd_4) 3))))
> !!!specializing> 
> specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
Run time: 28.65 seconds
#f
> > > ----------------------------------------------------------------------> 
> Similix (lambda) :> 
> > !!!preprocessing> 
> front-end flow bt sp eod oc rl 
'done
> front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
front-end flow bt sp eod oc rl 
Run time: 119.55 seconds
'done
> !!!generating compiler> 
> generating compiler (timing)
'()
> generating compiler (timing)
Run time: 611.39 seconds
'()
> !!!compiling> 
> loading current compiler
_simtmp0.scm _simtmp1.scm 

specializing
'((define (main-0 d_0 y_1) (define (mymap-0-2 f_0 l_1) (if (null? l_1) '() (cons (- (car l_1) f_0) (mymap-0-2 f_0 (cdr l_1))))) (define (mymap-0-1 f_0 l_1) (if (null? l_1) '() (cons (+ (car l_1) f_0) (mymap-0-1 f_0 (cdr l_1))))) (cons (mymap-0-1 y_1 d_0) (mymap-0-2 y_1 d_0))))
> specializing (timing)
Run time: 18.24 seconds
'((define (main-0 d_0 y_1) (define (mymap-0-2 f_0 l_1) (if (null? l_1) '() (cons (- (car l_1) f_0) (mymap-0-2 f_0 (cdr l_1))))) (define (mymap-0-1 f_0 l_1) (if (null? l_1) '() (cons (+ (car l_1) f_0) (mymap-0-1 f_0 (cdr l_1))))) (cons (mymap-0-1 y_1 d_0) (mymap-0-2 y_1 d_0))))
> !!!specializing> 
> specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
specializing
Run time: 29.36 seconds
#f
> > > ----------------------------------------------------------------------> 
> PGG (app) :> 
> > !!!preprocessing> 
> Run time: 16.02 seconds
#f
> > !!!generating compiler> 
> > > Run time: 4.80 seconds
'(multi-memo 1 '$goal-1092 '(0 1) (list xxx yyy))
> > !!!compiling> 
> > > Run time: 3.02 seconds
'($goal-1102-1706 yyy)
> > > ----------------------------------------------------------------------> 
> PGG (app) :> 
> > !!!preprocessing> 
> Run time: 47.08 seconds
#f
> > !!!generating compiler> 
> > > Run time: 9.72 seconds
'(multi-memo 1 '$goal-3498 '(0 1) (list xxx yyy))
> > !!!compiling> 
> > > Run time: 3.77 seconds
'($goal-3514-4223 yyy)
> > > ----------------------------------------------------------------------> 
> PGG (lambda) :> 
> > !!!preprocessing> 
> Run time: 42.74 seconds
#f
> > !!!generating compiler> 
> > > Run time: 12.11 seconds
'(multi-memo 1 '$goal-6509 '(1 1) (list xxx yyy))
> > !!!compiling> 
> > > Run time: 10.96 seconds
'($goal-6531-8236 xxx yyy)
> 