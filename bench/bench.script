,open big-scheme escapes
(load "cogen-load.scm")

(define repetitions 100)

;;; first run on append
(display "Similix (app) :") (newline)
;;;
(display "!!!preprocessing") (newline)
(preprocess! 'app '(s d) "examples/app")
,time (ntimes (lambda () (preprocess! 'app '(s d) "examples/app"))
	      repetitions)
(display "!!!generating compiler") (newline)
(cogen 1)
,time (cogen repetitions)
(display "!!!compiling") (newline)
(comp '((a b c) ***))
,time (comp '((a b c) ***) repetitions)
(display "!!!specializing") (newline)
,time (ntimes (lambda() (begin (similix '((a b c) ***)) #f)) repetitions)

;;; second run with partially static data
(display "----------------------------------------------------------------------") (newline)
(display "Similix (ctors) :") (newline)
;;;
(display "!!!preprocessing") (newline)
(preprocess! 'main '(s d) "examples/ctors")
,time (ntimes (lambda () (preprocess! 'main '(s d) "examples/ctors"))
	      repetitions)
(display "!!!generating compiler") (newline)
(cogen 1)
,time (cogen repetitions)
(display "!!!compiling") (newline)
(comp '((a b c) ***))
,time (comp '((a b c) ***) repetitions)
(display "!!!specializing") (newline)
,time (ntimes (lambda() (begin (similix '((a b c) ***)) #f)) repetitions)

;;; third run with partially static functions
(display "----------------------------------------------------------------------") (newline)
(display "Similix (lambda) :") (newline)
;;;
(display "!!!preprocessing") (newline)
(preprocess! 'main '(d d) "examples/lambda")
,time (ntimes (lambda () (preprocess! 'main '(d d) "examples/lambda"))
	      repetitions)
(display "!!!generating compiler") (newline)
(cogen 1)
,time (cogen repetitions)
(display "!!!compiling") (newline)
(comp '(*** ***))
,time (comp '(*** ***) repetitions)
(display "!!!specializing") (newline)
,time (ntimes (lambda() (begin (similix '(*** ***)) #f)) repetitions)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "----------------------------------------------------------------------") (newline)
(display "PGG (app) :") (newline)

(display "!!!preprocessing") (newline)
,time (ntimes (lambda() (cogen-driver '("examples/app.scm") '(app s d)) #f) repetitions)

(display "!!!generating compiler") (newline)
(define ppp (cogen-driver '("examples/app.scm") '(app s d)))
(eval `(BEGIN ,@ppp) (interaction-environment))
,time (ntimes (lambda () (start-memo 2 '$goal '(1 2) (list  'XXX 'YYY))) repetitions)

(display "!!!compiling") (newline)
(define level1 (start-memo 2 '$goal '(1 2) (list  'XXX 'YYY)))
(eval `(BEGIN ,@*residual-program*) (interaction-environment))
,time (ntimes (lambda () (start-memo 1
				     (cadr (list-ref  level1 2))
				     (cadr (list-ref level1 3))
				     (list  '(a b c) 'YYY))) repetitions)

;;; second run 
(display "----------------------------------------------------------------------") (newline)
(display "PGG (ctors) :") (newline)

(display "!!!preprocessing") (newline)
,time (ntimes (lambda() (cogen-driver '("examples/ctors.scm") '(main s d)) #f) repetitions)

(display "!!!generating compiler") (newline)
(define ppp (cogen-driver '("examples/ctors.scm") '(main s d)))
(eval `(BEGIN ,@ppp) (interaction-environment))
,time (ntimes (lambda () (start-memo 2 '$goal '(1 2) (list  'XXX 'YYY))) repetitions)

(display "!!!compiling") (newline)
(define level1 (start-memo 2 '$goal '(1 2) (list  'XXX 'YYY)))
(eval `(BEGIN ,@*residual-program*) (interaction-environment))
,time (ntimes (lambda () (start-memo 1
				     (cadr (list-ref  level1 2))
				     (cadr (list-ref level1 3))
				     (list  '(a b c) 'YYY))) repetitions)

;;; third run
(display "----------------------------------------------------------------------") (newline)
(display "PGG (lambda) :") (newline)

(display "!!!preprocessing") (newline)
,time (ntimes (lambda() (cogen-driver '("examples/lambda.sim") '(main d d)) #f) repetitions)

(display "!!!generating compiler") (newline)
(define ppp (cogen-driver '("examples/lambda.sim") '(main d d)))
(eval `(BEGIN ,@ppp) (interaction-environment))
,time (ntimes (lambda () (start-memo 2 '$goal '(2 2) (list  'XXX 'YYY))) repetitions)

(display "!!!compiling") (newline)
(define level1 (start-memo 2 '$goal '(2 2) (list  'XXX 'YYY)))
(eval `(BEGIN ,@*residual-program*) (interaction-environment))
,time (ntimes (lambda () (start-memo 1
				     (cadr (list-ref  level1 2))
				     (cadr (list-ref level1 3))
				     (list  'XXX 'YYY))) repetitions)
,exit
