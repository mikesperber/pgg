;;; abstract syntax for programs in A normal form
(define-record anf-def (name body)	;comp
  (last (anf-get-last body)))

(define-record anf-var (name))		; -> value
(define-record anf-const (value))	; -> value
(define-record anf-cond (if then else)	;value comp comp -> comp
  info
  (last-then (anf-get-last then))
  (last-else (anf-get-last else)))
(define-record anf-op (name actuals))	;values -> comp
(define-record anf-call (name actuals))	;values -> comp
(define-record anf-let (formal header body) ;comp comp -> comp
  info
  nr)
(define-record anf-unit (body)		;comp -> comp
  info
  nr)
(define-record anf-lambda (formals body) ;comp -> value
  nr
  (last (anf-get-last body))		;this is now a list of anf-var
  (free (anf-freevars formals body)))
(define-record anf-app (rator rands)	;value values -> comp
  nr
  info
  rpass
  rreturn
  (saved-rpass #f)
  (saved-rreturn #f))
(define-record anf-ctor (name actuals))	;values -> comp 
(define-record anf-sel (name actual))	;value -> comp
(define-record anf-test (name actual))	;value -> comp
(define-record anf-ref (actual)		;value -> comp
  nr)
(define-record anf-deref (actual))	;value -> comp
(define-record anf-assign (ref actual))	;value value -> comp
(define-record anf-celleq (actuals))	;values -> comp

(define (anf-get-last anf)
  (cond
   ((anf-let? anf)
    (anf-get-last (anf-let->body anf)))
   ((anf-unit? anf)
    (list anf))
   ((anf-cond? anf)
    (append (anf-get-last (anf-cond->then anf))
	    (anf-get-last (anf-cond->else anf))))
   (else
    (list anf))))

(define (anf-freevars vars anf)
  (let loop ((anf anf))
    (cond
     ((anf-var? anf)
      (let ((var (anf-var->name anf)))
	(if (labset-elem? var vars)
	    empty-labset
	    (labset-singleton var))))
     ((anf-const? anf)
      empty-labset)
     ((anf-cond? anf)
      (labset-union (loop (anf-cond->if anf))
		    (labset-union (loop (anf-cond->then anf))
				  (loop (anf-cond->else anf)))))
     ((anf-op? anf)
      (labset-union* (map loop (anf-op->actuals anf))))
     ((anf-call? anf)
      (labset-union* (map loop (anf-op->actuals anf))))
     ((anf-let? anf)
      (labset-union (loop (anf-let->header anf))
		    (anf-freevars (cons (anf-let->formal anf) vars)
				  (anf-let->body anf))))
     ((anf-unit? anf)
      (loop (anf-unit->body anf)))
     ((anf-lambda? anf)
      (anf-freevars (append (anf-lambda->formals anf) vars)
		    (anf-lambda->body anf)))
     ((anf-app? anf)
      (labset-union (loop (anf-app->rator anf))
		    (labset-union* (map loop (anf-app->rands anf)))))
     ((anf-ctor? anf)
      (labset-union* (map loop (anf-ctor->actuals anf))))
     ((anf-sel? anf)
      (loop (anf-sel->actual anf)))
     ((anf-test? anf)
      (loop (anf-test->actual anf)))
     ((anf-ref? anf)
      (loop (anf-ref->actual anf)))
     ((anf-deref? anf)
      (loop (anf-deref->actual anf)))
     ((anf-assign? anf)
      (labset-union (loop (anf-assign->ref anf))
		    (loop (anf-assign->actual anf))))
     ((anf-celleq? anf)
      (labset-union* (map loop (anf-celleq->actuals anf))))
     (else
      (error "unknown syntax" anf)))))

(define (anf-display-d* d*)
  (for-each anf-display-d d*))

(define (anf-display-d def)
  (display "define ")
  (display (anf-def->name def))
  (display " = ")
  (newline)
  (anf-display-e (anf-def->body def))
  (newline))


(define (anf-display-e anf)
  (let loop ((anf anf))
    (cond
     ((anf-var? anf)
      (display (anf-var->name anf)))
     ((anf-const? anf)
      (display (anf-const->value anf)))
     ((anf-cond? anf)
      (display "if ")
      (loop (anf-cond->if anf))
      (newline)
      (display "then ")
      (loop (anf-cond->then anf))
      (display "else ")
      (loop (anf-cond->else anf)))
     ((anf-op? anf)
      (display (anf-op->name anf))
      (for-each (lambda (actual)
		  (display " ") (loop actual))
		(anf-op->actuals anf)))
     ((anf-call? anf)
      'unused)
     ((anf-let? anf)
      (display "let{")
      (display (anf-let->nr anf))
      (display "} ")
      (display (anf-let->formal anf))
      (display " = ")
      (loop (anf-let->header anf))
      (display " in")
      (newline)
      (loop (anf-let->body anf)))
     ((anf-unit? anf)
      (display "   {")
      (display (anf-unit->nr anf))
      (display "} ")
      (loop (anf-unit->body anf))
      (newline))
     ((anf-lambda? anf)
      (display "lambda[")
      (display (anf-lambda->nr anf))
      (display "] ")
      (display (anf-lambda->formals anf))
      (display " . ")
      (loop (anf-lambda->body anf)))
     ((anf-app? anf)
      (loop (anf-app->rator anf))
      (for-each (lambda (rand)
		  (display " ") (loop rand))
		(anf-app->rands anf)))
     ((anf-ctor? anf)
      (display "ctor ")
      (display (anf-ctor->name anf))
      (for-each (lambda (actual)
		  (display " ") (loop actual))
		(anf-ctor->actuals anf)))
     ((anf-sel? anf)
      (display "sel ")
      (display (anf-sel->name anf))
      (display " ")
      (loop (anf-sel->actual anf)))
     ((anf-test? anf)
      (display "test ")
      (display (anf-test->name anf))
      (display " ")
      (loop (anf-test->actual anf)))
     ((anf-ref? anf)
      (display "ref[")
      (display (anf-ref->nr anf))
      (display "] ")
      (loop (anf-ref->actual anf)))
     ((anf-deref? anf)
      (display "deref ")
      (loop (anf-deref->actual anf)))
     ((anf-assign? anf)
      (display "setref ")
      (loop (anf-assign->ref anf))
      (display " ")
      (loop (anf-assign->actual anf)))
     ((anf-celleq? anf)
      (display "refeq?")
      (for-each (lambda (actual)
		  (display " ") (loop actual))
		(anf-celleq->actuals anf)))
     (else
      (error "unknown syntax" anf)))))

(define (latex-display-anf-d* d*)
  (for-each latex-display-anf-d d*))

(define (latex-display-symbol s)
  (let* ((str (symbol->string s))
	 (l (string-length str)))
    (display "\\code{")
    (let loop ((i 0))
      (if (< i l)
	  (let ((c (string-ref str i)))
	    (case c
	      ((#\_) (display "\\_"))
	      ((#\#) (display "\\#"))
	      ((#\{) (display "\\{"))
	      ((#\}) (display "\\}"))
	      (else (display c)))
	    (loop (+ i 1)))))
    (display "}")))

(define (latex-display-symbol* s*)
  (for-each (lambda (s)
	      (display "~")
	      (latex-display-symbol s))
	    s*))

(define (latex-display-anf-d def)
  (display "\\Define{")
  (latex-display-symbol (anf-def->name def))
  (display "}{\\Letsequence{")
  (newline)
  (latex-display-anf-e (anf-def->body def))
  (display "}}") (newline) (newline))



(define (latex-display-anf-e anf)
  (let loop ((anf anf))
    (cond
     ((anf-var? anf)
      (latex-display-symbol (anf-var->name anf)))
     ((anf-const? anf)
      (display (anf-const->value anf)))
     ((anf-cond? anf)
      (display "\\If{")
      (loop (anf-cond->if anf))
      (newline)
      (display "}{\\Letsequence{")
      (loop (anf-cond->then anf)) (newline)
      (display "}}{\\Letsequence{")
      (loop (anf-cond->else anf))
      (display "}}"))
     ((anf-op? anf)
      (display "\\Op{")
      (latex-display-symbol (anf-op->name anf))
      (display "}{")
      (for-each (lambda (actual)
		  (display "~") (loop actual))
		(anf-op->actuals anf))
      (display "}"))
     ((anf-call? anf)
      'unused)
     ((anf-let? anf)
      (display "\\Letitem{")
      (display (anf-let->nr anf))
      (display "}{")
      (latex-display-symbol (anf-let->formal anf))
      (display "}{")
      (loop (anf-let->header anf))
      (display "}")
      (newline)
      (loop (anf-let->body anf)))
     ((anf-unit? anf)
      (display "\\Unititem{")
      (display (anf-unit->nr anf))
      (display "}{")
      (loop (anf-unit->body anf))
      (display "}")
      (newline))
     ((anf-lambda? anf)
      (display "\\Lam{")
      (display (anf-lambda->nr anf))
      (display "}{")
      (latex-display-symbol* (anf-lambda->formals anf))
      (display "}{\\Letsequence{")
      (loop (anf-lambda->body anf))
      (display "}}"))
     ((anf-app? anf)
      (display "\\App{")
      (loop (anf-app->rator anf))
      (display "}{")
      (for-each (lambda (rand)
		  (display "~") (loop rand))
		(anf-app->rands anf))
      (display "}"))
     ((anf-ctor? anf)
      (display "ctor ")
      (display (anf-ctor->name anf))
      (for-each (lambda (actual)
		  (display " ") (loop actual))
		(anf-ctor->actuals anf)))
     ((anf-sel? anf)
      (display "sel ")
      (display (anf-sel->name anf))
      (display " ")
      (loop (anf-sel->actual anf)))
     ((anf-test? anf)
      (display "test ")
      (display (anf-test->name anf))
      (display " ")
      (loop (anf-test->actual anf)))
     ((anf-ref? anf)
      (display "\\Ref{")
      (display (anf-ref->nr anf))
      (display "}{")
      (loop (anf-ref->actual anf))
      (display "}"))
     ((anf-deref? anf)
      (display "\\Deref{")
      (loop (anf-deref->actual anf))
      (display "}"))
     ((anf-assign? anf)
      (display "\\Setref{")
      (loop (anf-assign->ref anf))
      (display "}{")
      (loop (anf-assign->actual anf))
      (display "}"))
     ((anf-celleq? anf)
      (display "refeq?")
      (for-each (lambda (actual)
		  (display " ") (loop actual))
		(anf-celleq->actuals anf)))
     (else
      (error "unknown syntax" anf)))))
