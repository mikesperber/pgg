(define (int exp names values)
  (let loop ((exp exp))
    (define (apply-prim exp)
      (case (car exp)
	((+) (+ (loop (cadr exp)) (loop (caddr exp))))
	((-) (- (loop (cadr exp)) (loop (caddr exp))))
	((zero?) (zero? (loop (cadr exp))))))
    (cond
     ((constant? exp)
      exp)
     ((not (pair? exp))
      (lookup exp names values))
     ((eq? (car exp) 'IF)
      (let ((test-exp (cadr exp))
	    (then-exp (caddr exp))
	    (else-exp (cadddr exp)))
	(if (loop test-exp)
	    (loop then-exp)
	    (loop else-exp))))
     ((eq? (car exp) 'LAMBDA)
      (lambda (y) (int (caddr exp) (cons (caadr exp) names) (cons y values))))
     ((eq? (car exp) 'APPLY)
      ((int (cadr exp) names values)
       (int (caddr exp) names values)))
     (else
      (apply-prim exp))
     )))

(define (constant? e)
  (or (boolean? e)
      (number? e)
      (and (pair? e) (eq? (car e) 'QUOTE))))

(define (lookup v names values)
  (let loop ((names names) (values values))
    (if (eq? v (car names))
	(car values)
	(loop (cdr names) (cdr values)))))

