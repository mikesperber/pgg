(define-data my-list (nil) (cons hd tl))

(define (run e v)
  (int e (lambda (m) v)))
(define (int e r)
  (cond
   ((eq? (hd e) 'CONST) (hd (tl e)))
   ((eq? (hd e) 'VAR) (r (hd (tl e))))
   ((eq? (hd e) 'CONS) (cons (int (hd (tl e)) r)
			     (int (hd (tl (tl e))) r)))
   ((eq? (hd e) 'IF) (if (int (hd (tl e)) r)
			 (int (hd (tl (tl e))) r)
			 (int (hd (tl (tl (tl e)))) r)))
   ((eq? (hd e) 'ABS) (lambda (x) (int (hd (tl (tl e)))
				       (upd (hd (tl e)) x r))))
   ((eq? (hd e) 'LETREC) (int (hd (tl (tl (tl e))))
			      (fix (lambda (r1)
				     (upd (hd (tl e))
					  (int (hd (tl (tl e))) r1)
					  r)))))
   (else ((int (hd (tl e)) r)
	  (int (hd (tl (tl e))) r)))))
(define (upd n v r)
  (lambda (m) (if (eq? n m) v (r m))))
(define (fix f)
  (lambda (x) ((f (fix f)) x)))

