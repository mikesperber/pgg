(define-data my-list (nil) (cons hd tl))

(define (run e p v)
  (int e (cons 'X (nil)) (cons v (nil)) p))
(define (int e ns vs p)
  (cond
   ((eq? (hd e) 'CONST) (hd (tl e)))
   ((eq? (hd e) 'VAR) (lookupvar (hd (tl e)) ns vs))
   ((eq? (hd e) 'CONS) (cons (int (hd (tl e)) ns vs p)
			     (int (hd (tl (tl e))) ns vs p)))
   ((eq? (hd e) 'IF) (if (int (hd (tl e)) ns vs p)
			 (int (hd (tl (tl e))) ns vs p)
			 (int (hd (tl (tl (tl e)))) ns vs p)))
   ((eq? (hd e) 'LET) (int (hd (tl (tl (tl e))))
			   (cons (hd (tl e)) ns)
			   (cons (int (hd (tl (tl e))) ns vs p) vs)
			   p))
   ((eq? (hd e) 'CALL) (int (lookupbody (hd (tl e)) p)
			    (lookupnames (hd (tl e)) p)
			    (intlist (hd (tl (tl e))) ns vs p)))
   ((eq? (hd e) 'LAM) (lambda (x)
			(int (hd (tl (tl e)))
			     (cons (hd (tl e)) ns)
			     (cons x vs)
			     p)))
   ((eq? (hd e) 'APP) ((int (hd (tl e)) ns vs p)
		       (int (hd (tl (tl e))) ns vs p)))
   (else 'ERROR)))

(define (lookupvar n ns vs)
  (if (eq? n (hd ns))
      (hd vs)
      (lookupvar n (tl ns) (tl vs))))

(define (lookupbody f p)
  (if (eq? f (hd (hd p)))
      (hd (tl (tl (hd p))))
      (lookupbody f (tl p))))

(define (lookupnames f p)
  (if (eq? f (hd (hd p)))
      (hd (tl (hd p)))
      (lookupnames f (tl p))))

(define (intlist es ns vs p)
  (if (nil? es)
      (nil)
      (cons (int (hd es) ns vs p)
	    (intlist (tl es) ns vs p))))
