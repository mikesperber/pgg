(define make-input-symbols '(a b c d e f g h i j k l m n o p q r s t u v w x y z))
(define (make-input-symbol n)
  (list-ref make-input-symbols (remainder n 26)))
(define (make-many-input-symbols n)
  (let loop ((nr (+ 1 (quotient n 3))))
    (if (zero? nr)
	'()
	(cons `(cst ,(make-input-symbol (+ (* n 3) (* nr 5))))
	      (loop (- nr 1))))))
(define (make-input n)
  (if (zero? n)
      `(var zzz)
      `(seq ,(make-input (- n 1))
	    ,@(make-many-input-symbols n)
	    ,(make-input (quotient n 2)))))
